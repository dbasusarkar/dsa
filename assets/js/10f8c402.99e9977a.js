"use strict";(self.webpackChunkdsa=self.webpackChunkdsa||[]).push([[3208],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>c});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=a.createContext({}),m=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=m(e.components);return a.createElement(o.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=m(t),c=r,h=d["".concat(o,".").concat(c)]||d[c]||p[c]||i;return t?a.createElement(h,l(l({ref:n},u),{},{components:t})):a.createElement(h,l({ref:n},u))}));function c(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=d;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var m=2;m<i;m++)l[m]=t[m];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>l});var a=t(7294),r=t(6010);const i="tabItem_Ymn6";function l(e){let{children:n,hidden:t,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i,l),hidden:t},n)}},5488:(e,n,t)=>{t.d(n,{Z:()=>c});var a=t(7462),r=t(7294),i=t(6010),l=t(2389),s=t(7392),o=t(7094),m=t(2466);const u="tabList__CuJ",p="tabItem_LNqP";function d(e){var n;const{lazy:t,block:l,defaultValue:d,values:c,groupId:h,className:g}=e,v=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),b=c??v.map((e=>{let{props:{value:n,label:t,attributes:a}}=e;return{value:n,label:t,attributes:a}})),y=(0,s.l)(b,((e,n)=>e.value===n.value));if(y.length>0)throw new Error(`Docusaurus error: Duplicate values "${y.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const f=null===d?d:d??(null==(n=v.find((e=>e.props.default)))?void 0:n.props.value)??v[0].props.value;if(null!==f&&!b.some((e=>e.value===f)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${f}" but none of its children has the corresponding value. Available values are: ${b.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:k,setTabGroupChoices:w}=(0,o.U)(),[x,S]=(0,r.useState)(f),L=[],{blockElementScrollPositionUntilNextRender:P}=(0,m.o5)();if(null!=h){const e=k[h];null!=e&&e!==x&&b.some((n=>n.value===e))&&S(e)}const j=e=>{const n=e.currentTarget,t=L.indexOf(n),a=b[t].value;a!==x&&(P(n),S(a),null!=h&&w(h,String(a)))},E=e=>{var n;let t=null;switch(e.key){case"ArrowRight":{const n=L.indexOf(e.currentTarget)+1;t=L[n]??L[0];break}case"ArrowLeft":{const n=L.indexOf(e.currentTarget)-1;t=L[n]??L[L.length-1];break}}null==(n=t)||n.focus()};return r.createElement("div",{className:(0,i.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":l},g)},b.map((e=>{let{value:n,label:t,attributes:l}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:x===n?0:-1,"aria-selected":x===n,key:n,ref:e=>L.push(e),onKeyDown:E,onFocus:j,onClick:j},l,{className:(0,i.Z)("tabs__item",p,null==l?void 0:l.className,{"tabs__item--active":x===n})}),t??n)}))),t?(0,r.cloneElement)(v.filter((e=>e.props.value===x))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},v.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==x})))))}function c(e){const n=(0,l.Z)();return r.createElement(d,(0,a.Z)({key:String(n)},e))}},3277:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>o,default:()=>c,frontMatter:()=>s,metadata:()=>m,toc:()=>p});var a=t(7462),r=(t(7294),t(3905)),i=t(5488),l=t(5162);const s={sidebar_position:1,id:"a-arrays",title:"Arrays",tags:["arrays","3sum","best-time-to-buy-and-sell-stocks","combination-sum","container-with-most-water","contains-duplicate","insert-interval","majority-element","merge-intervals","product-of-array-except-self","sort-colors","two-sum"]},o="Arrays",m={unversionedId:"data-structures/a-arrays",id:"data-structures/a-arrays",title:"Arrays",description:"- Understanding arrays",source:"@site/docs/data-structures/a-arrays.md",sourceDirName:"data-structures",slug:"/data-structures/a-arrays",permalink:"/dsa/docs/data-structures/a-arrays",draft:!1,tags:[{label:"arrays",permalink:"/dsa/docs/tags/arrays"},{label:"3sum",permalink:"/dsa/docs/tags/3-sum"},{label:"best-time-to-buy-and-sell-stocks",permalink:"/dsa/docs/tags/best-time-to-buy-and-sell-stocks"},{label:"combination-sum",permalink:"/dsa/docs/tags/combination-sum"},{label:"container-with-most-water",permalink:"/dsa/docs/tags/container-with-most-water"},{label:"contains-duplicate",permalink:"/dsa/docs/tags/contains-duplicate"},{label:"insert-interval",permalink:"/dsa/docs/tags/insert-interval"},{label:"majority-element",permalink:"/dsa/docs/tags/majority-element"},{label:"merge-intervals",permalink:"/dsa/docs/tags/merge-intervals"},{label:"product-of-array-except-self",permalink:"/dsa/docs/tags/product-of-array-except-self"},{label:"sort-colors",permalink:"/dsa/docs/tags/sort-colors"},{label:"two-sum",permalink:"/dsa/docs/tags/two-sum"}],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,id:"a-arrays",title:"Arrays",tags:["arrays","3sum","best-time-to-buy-and-sell-stocks","combination-sum","container-with-most-water","contains-duplicate","insert-interval","majority-element","merge-intervals","product-of-array-except-self","sort-colors","two-sum"]},sidebar:"docs",previous:{title:"Data Structures",permalink:"/dsa/docs/category/data-structures"},next:{title:"Strings",permalink:"/dsa/docs/data-structures/b-strings"}},u={},p=[{value:"Problems related to arrays",id:"problems-related-to-arrays",level:2},{value:"\u2197 See LeetCode Problem #121",id:"-see-leetcode-problem-121",level:3},{value:"\u2197 See LeetCode Problem #39",id:"-see-leetcode-problem-39",level:3},{value:"\u2197 See LeetCode Problem #11",id:"-see-leetcode-problem-11",level:3},{value:"\u2197 See LeetCode Problem #217",id:"-see-leetcode-problem-217",level:3},{value:"\u2197 See LeetCode Problem #57",id:"-see-leetcode-problem-57",level:3},{value:"\u2197 See LeetCode Problem #169",id:"-see-leetcode-problem-169",level:3},{value:"\u2197 See LeetCode Problem #56",id:"-see-leetcode-problem-56",level:3},{value:"\u2197 See LeetCode Problem #238",id:"-see-leetcode-problem-238",level:3},{value:"\u2197 See LeetCode Problem #75",id:"-see-leetcode-problem-75",level:3},{value:"\u2197 See LeetCode Problem #1",id:"-see-leetcode-problem-1",level:3},{value:"\u2197 See LeetCode Problem #15",id:"-see-leetcode-problem-15",level:3}],d={toc:p};function c(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"arrays"},"Arrays"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Understanding arrays"),(0,r.kt)("li",{parentName:"ul"},"Solved problems are presented in alphabetical order")),(0,r.kt)("h2",{id:"problems-related-to-arrays"},"Problems related to arrays"),(0,r.kt)("details",null,(0,r.kt)("summary",null," Best Time to Buy and Sell Stocks (Expand/Collapse) "),(0,r.kt)("h3",{id:"-see-leetcode-problem-121"},(0,r.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/best-time-to-buy-and-sell-stock/"},"\u2197 See LeetCode Problem #121")),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},'public class Solution {\n    static int maxProfit(int[] prices) {\n\n//        int profit = 0;\n//        int maxProfit = 0;\n//\n//\n//        for (int i = 0; i < prices.length - 1; i++) {\n//\n//            for (int j = i + 1; j < prices.length; j++) {\n//                profit = prices[j] - prices[i];\n////                maxProfit = Math.max(profit, maxProfit);\n//                if (profit > maxProfit) {\n//                    maxProfit = profit;\n//                }\n//            }\n//        }\n        int minValue = Integer.MAX_VALUE;\n        int maxProfit = 0;\n\n        for (int i = 0; i < prices.length; i++) {\n            if (prices[i] < minValue) {\n                minValue = prices[i];\n            } else if (prices[i] - minValue > maxProfit) {\n                maxProfit = prices[i] - minValue;\n            }\n        }\n        return maxProfit;\n    }\n\n    public static void main(String[] args) {\n        int[] prices1 = {7,1,5,3,6,4};\n        //  O/P: 5\n\n        int[] prices2 = {7,6,4,3,1};\n        //  O/P: 0\n\n        System.out.println("Ex1: " + maxProfit(prices1));\n        System.out.println("Ex2: " + maxProfit(prices2));\n    }\n}\n'))))),(0,r.kt)("details",null,(0,r.kt)("summary",null," Combination Sum (Expand/Collapse) "),(0,r.kt)("h3",{id:"-see-leetcode-problem-39"},(0,r.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/combination-sum/"},"\u2197 See LeetCode Problem #39")),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.LinkedList;\nimport java.util.List;\n\npublic class Solution {\n    private static void backtrackingMethod(\n            int remainingTarget,\n            LinkedList<Integer> currentCombination,\n            int startIndex,\n            int[] candidates,\n            List<List<Integer>> outputList\n    ) {\n\n        if (remainingTarget == 0) {\n            //  Make a deep copy the currentCombination\n            //      and add it to the output list of lists\n            outputList.add(new ArrayList<>(currentCombination));\n            return;\n        } else if (remainingTarget < 0) {\n            return;\n        }\n\n        for (int i = startIndex; i < candidates.length; i++) {\n\n            currentCombination.add(candidates[i]);\n            backtrackingMethod(remainingTarget - candidates[i],\n                    currentCombination,\n                    i,\n                    candidates,\n                    outputList);\n\n            currentCombination.removeLast();\n\n        }\n\n    }\n\n    public static List<List<Integer>> combinationSum(int[] candidates, int target) {\n\n        List<List<Integer>> outputList = new ArrayList<>();\n        LinkedList<Integer> currentCombination = new LinkedList<>();\n\n        backtrackingMethod(target,\n                currentCombination,\n                0,\n                candidates,\n                outputList);\n\n        return outputList;\n\n    }\n\n    public static void main(String[] args) {\n        // Example 1:\n        int[] candidates1 = {2,3,6,7};\n        int target1 = 7;\n        //  O/P: [[2,2,3],[7]]\n\n        // Example 2:\n        int[] candidates2 = {2,3,5};\n        int target2 = 8;\n        //Output: [[2,2,2,2],[2,3,3],[3,5]]\n\n        // Example 3:\n        int[] candidates3 = {2};\n        int target3 = 1;\n        //Output: []\n\n        System.out.println(combinationSum(candidates1, target1));\n        System.out.println(combinationSum(candidates2, target2));\n        System.out.println(combinationSum(candidates3, target3));\n\n    }\n}\n"))))),(0,r.kt)("details",null,(0,r.kt)("summary",null," Container with Most Water (Expand/Collapse) "),(0,r.kt)("h3",{id:"-see-leetcode-problem-11"},(0,r.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/container-with-most-water/"},"\u2197 See LeetCode Problem #11")),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"public class Solution {\n    public static int maxArea(int[] height) {\n\n        int leftBoundary = 0;\n        int rightBoundary = height.length - 1;\n        int maxAreaValue = 0;\n\n        while (leftBoundary < rightBoundary) {\n\n            int width = rightBoundary - leftBoundary;\n\n            maxAreaValue = Math.max(maxAreaValue, Math.min(height[leftBoundary],\n                    height[rightBoundary]) * width);\n\n            if (height[leftBoundary] <= height[rightBoundary]) {\n                leftBoundary++;\n            } else {\n                rightBoundary--;\n            }\n\n        }\n\n        return maxAreaValue;\n    }\n\n    public static void main (String[] args) {\n\n        // Example 1:\n        int[] height1 = {1,8,6,2,5,4,8,3,7};\n        //  O/P: 49\n\n        // Example 2:\n        int[] height2 = {1,1};\n        //  O/P: 1\n\n        System.out.println(maxArea(height1));\n        System.out.println(maxArea(height2));\n\n    }\n}\n"))))),(0,r.kt)("details",null,(0,r.kt)("summary",null," Contains Duplicate (Expand/Collapse) "),(0,r.kt)("h3",{id:"-see-leetcode-problem-217"},(0,r.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/contains-duplicate/"},"\u2197 See LeetCode Problem #217")),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"//import java.util.HashSet;\n//import java.util.Set;\n\npublic class Solution {\n    static boolean containsDuplicate(int[] nums) {\n\n        java.util.Set<Integer> mySet = new java.util.HashSet<>();\n\n        for (int num : nums) {\n            if (mySet.contains(num)) {\n                return true;\n            } else {\n                mySet.add(num);\n            }\n        }\n\n        return false;\n\n    }\n\n    public static void main(String[] args) {\n        // Example 1:\n         int[] nums1 = {1,2,3,1};\n        //Output: true\n\n        // Example 2:\n         int[] nums2 = {1,2,3,4};\n        //  O/P: false\n\n        // Example 3:\n         int[] nums3 = {1,1,1,3,3,4,3,2,4,2};\n        //  O/P: true\n\n        System.out.println(containsDuplicate(nums1));\n        System.out.println(containsDuplicate(nums2));\n        System.out.println(containsDuplicate(nums3));\n\n    }\n}\n"))))),(0,r.kt)("details",null,(0,r.kt)("summary",null," Insert Interval (Expand/Collapse) "),(0,r.kt)("h3",{id:"-see-leetcode-problem-57"},(0,r.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/insert-interval/"},"\u2197 See LeetCode Problem #57")),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.LinkedList;\nimport java.util.List;\n\npublic class Solution {\n    public static int[][] insert(int[][] intervals, int[] newInterval) {\n\n        LinkedList<int[]> mergedIntervals = new LinkedList<>();\n\n        int[][] emptyIntervals = {{}};\n\n        //  Check if given intervals is null or empty\n        //  If true, return only list of intervals with newInterval\n        if (intervals == null || Arrays.deepEquals(intervals, emptyIntervals)) {\n            mergedIntervals.add(newInterval);\n            return mergedIntervals.toArray(new int[mergedIntervals.size()][2]);\n        }\n\n        int newIntervalStart = newInterval[0];\n        int newIntervalEnd = newInterval[1];\n\n        int index = 0;\n\n        //  Added all intervals with start of the intervals\n        //      less than the end of the new interval\n        while (index < intervals.length &&\n                intervals[index][1] < newIntervalStart) {\n            mergedIntervals.add(intervals[index++]);\n        }\n\n        int[] interval = new int[2];\n\n        while (index < intervals.length &&\n                intervals[index][0] <= newIntervalEnd) {\n            newIntervalStart = Math.min(intervals[index][0], newIntervalStart);\n            newIntervalEnd = Math.max(intervals[index][1], newIntervalEnd);\n            index++;\n        }\n\n        interval[0] = newIntervalStart;\n        interval[1] = newIntervalEnd;\n\n        mergedIntervals.add(interval);\n\n        //  Add all remaining intervals to the output list\n        while (index < intervals.length) {\n            mergedIntervals.add(intervals[index++]);\n        }\n\n        return mergedIntervals.toArray(new int[mergedIntervals.size()][2]);\n\n    }\n\n    public static void main (String[] args) {\n        // Example 1:\n        int[][] intervals1 = {{1,3},{6,9}};\n        int[] newInterval1 = {2,5};\n        //Output: [[1,5],[6,9]]\n\n        // Example 2:\n        int[][] intervals2 = {{1,2},{3,5},{6,7},{8,10},{12,16}};\n        int[] newInterval2 = {4,8};\n        //Output: [[1,2],[3,10],[12,16]]\n\n        // Example 3:\n        int[][] intervals3 = null;\n        int[] newInterval3 = {4,8};\n\n        // Example 4:\n        int[][] intervals4 = {{}};\n        int[] newInterval4 = {4,8};\n\n        System.out.println(Arrays.deepToString(insert(intervals1, newInterval1)));\n        System.out.println(Arrays.deepToString(insert(intervals2, newInterval2)));\n        System.out.println(Arrays.deepToString(insert(intervals3, newInterval3)));\n        System.out.println(Arrays.deepToString(insert(intervals4, newInterval4)));\n    }\n}\n"))))),(0,r.kt)("details",null,(0,r.kt)("summary",null," Majority Element (Expand/Collapse) "),(0,r.kt)("h3",{id:"-see-leetcode-problem-169"},(0,r.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/majority-element/"},"\u2197 See LeetCode Problem #169")),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},'import java.util.Arrays;\n\npublic class Solution {\n    static int majorityElement(int[] nums) {\n\n//        //  Approach #1\n//        Arrays.sort(nums);\n//        return nums[nums.length/2];\n\n        //  Approach #2\n        //  Boyer-Moore Voting Algorithm\n\n        int count = 0;\n        Integer majorCandidate = null;\n\n        for (int num : nums) {\n            if (count == 0) {\n                majorCandidate = num;\n            }\n\n            count += (num == majorCandidate) ? 1 : -1;\n\n        }\n\n        return majorCandidate;\n    }\n\n    public static void main(String[] args) {\n        // Example 1:\n        int[] nums1 = {3,2,3};\n        //  O/P: 3\n        //\n        // Example 2:\n        int[] nums2 = {2,2,1,1,1,2,2};\n        //  O/P: 2\n\n        System.out.println("Example 1: " + majorityElement(nums1));\n        System.out.println("Example 2: " + majorityElement(nums2));\n\n    }\n}\n'))))),(0,r.kt)("details",null,(0,r.kt)("summary",null," Merge Intervals (Expand/Collapse) "),(0,r.kt)("h3",{id:"-see-leetcode-problem-56"},(0,r.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/merge-intervals/"},"\u2197 See LeetCode Problem #56")),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"import java.util.Arrays;\nimport java.util.LinkedList;\n\npublic class Solution {\n    static int[][] merge(int[][] intervals) {\n\n        //  Sort the given array based on the\n        //      starting value of each interval\n        Arrays.sort(intervals, (a,b) -> Integer.compare(a[0], b[0]));\n\n        //  Create a new LinkedList to generate the output\n        LinkedList<int[]> mergedList = new LinkedList<>();\n\n        for (int[] interval : intervals) {\n            if (mergedList.isEmpty() ||\n                    //  Or, if the ending value of last interval is less\n                    //      than the starting value of the current interval\n                    mergedList.getLast()[1] < interval [0]) {\n                mergedList.add(interval);\n            } else {\n                //  Update the ending value of the last interval\n                mergedList.getLast()[1] =\n                        //  The maximum of:\n                        //      the ending value of the last interval and\n                        //      the ending value of the current interval\n                        Math.max(mergedList.getLast()[1], interval[1]);\n            }\n        }\n\n        return mergedList.toArray(new int[mergedList.size()][]);\n    }\n\n    public static void main(String[] args) {\n\n        // Example 1:\n        int[][] intervals1 = {{1,3},{2,6},{8,10},{15,18}};\n        //  O/P: [[1,6],[8,10],[15,18]]\n\n        // Example 2:\n        int[][] intervals2 = {{1,4},{4,5}};\n        //  O/P: [[1,5]]\n\n        System.out.println(Arrays.deepToString(merge(intervals1)));\n        System.out.println(Arrays.deepToString(merge(intervals2)));\n    }\n}\n"))))),(0,r.kt)("details",null,(0,r.kt)("summary",null," Product of Array Except Self (Expand/Collapse) "),(0,r.kt)("h3",{id:"-see-leetcode-problem-238"},(0,r.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/product-of-array-except-self/"},"\u2197 See LeetCode Problem #238")),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"import java.util.Arrays;\n\npublic class Solution {\n    static int[] productExceptSelf(int[] nums) {\n        int[] result = new int[nums.length];\n\n        result[0] = 1;\n        int rightSide = 1;\n\n        //  Find products of elements on the left side of index i\n        //  At the end of the loop, only the last element of result\n        //     (result[nums.length - 1]) has the correct element\n        //  NOTE: loop doesn't update the first element of result\n        for (int i = 1; i <= nums.length - 1; i++) {\n            result[i] = nums[i - 1] * result[i - 1];\n        }\n\n        //  Multiply left-side products with the right-side products\n        //      to get the desired result\n        //  At the start of the loop,\n        //     only result[nums.length] has the correct element\n        //  NOTE: At the first step of the loop, the last element of result\n        //      (result[nums.length - 1]) stays the same\n        for (int i = nums.length - 1; i >= 0; i--) {\n            result[i] = result[i] * rightSide;\n            rightSide *= nums[i];\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n\n        // Example 1:\n        int[] nums1 = {1, 2, 3, 4};\n        //  O/P: [24,12,8,6]\n\n        // Example 2:\n        int[] nums2 = {-1, 1, 0, -3, 3};\n        //  O/P: [0,0,9,0,0]\n\n        System.out.println(Arrays.toString(productExceptSelf(nums1)));\n        System.out.println(Arrays.toString(productExceptSelf(nums2)));\n    }\n}\n"))))),(0,r.kt)("details",null,(0,r.kt)("summary",null," Sort Colors (Expand/Collapse) "),(0,r.kt)("h3",{id:"-see-leetcode-problem-75"},(0,r.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/sort-colors/"},"\u2197 See LeetCode Problem #75")),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"import java.util.Arrays;\n\npublic class Solution {\n    public static void sortColors(int[] nums) {\n        int indexLow = 0;\n        int indexHigh = nums.length - 1;\n\n        for (int i = 0; i <= indexHigh;) {\n\n            //  Make sure '0' has an index below indexLow\n            if (nums[i] == 0) {\n                swapElements(nums, i, indexLow);\n                i++;\n                indexLow++;\n            //  Make sure '1' has an index between\n            //      indexLow and indexHigh\n            } else if (nums[i] == 1) {\n                i++;\n            //  Make sure '2' has an index above indexHigh\n            } else {\n                swapElements(nums, i, indexHigh);\n                indexHigh--;\n            }\n\n        }\n\n        System.out.println(Arrays.toString(nums));\n    }\n\n    private static void swapElements (int[] nums, int index, int newIndex) {\n        int tempElement = nums[index];\n        nums[index] = nums[newIndex];\n        nums[newIndex] = tempElement;\n    }\n\n    public static void main(String[] args) {\n\n        // Example 1:\n        int[] nums1 = {2,0,2,1,1,0};\n        //  O/P: [0,0,1,1,2,2]\n\n        // Example 2:\n        int[] nums2 = {2,0,1};\n        // O/P: [0,1,2]\n\n        sortColors(nums1);\n        sortColors(nums2);\n    }\n}\n"))))),(0,r.kt)("details",null,(0,r.kt)("summary",null," Two Sum (Expand/Collapse) "),(0,r.kt)("h3",{id:"-see-leetcode-problem-1"},(0,r.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/two-sum/"},"\u2197 See LeetCode Problem #1")),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"import java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Solution {\n\n//    //  Brute force approach\n//    public int[] twoSum(int[] nums, int target) {\n//        for (int i = 0; i < nums.length; i++) {\n//            for (int j = i + 1; j < nums.length; j++) {\n//                if (nums[j] == target - nums[i]) {\n//                    return new int[]{i, j};\n//              }\n//          }\n//        }\n//        return null;\n//    }\n\n    //  O(N) time complexity\n    //  2-pass HashMap\n//      static int[] twoSum(int[] nums, int target) {\n//          Map<Integer, Integer> hmap = new HashMap<>();\n//          for (int i = 0; i < nums.length; i++) {\n//              hmap.put(nums[i], i);\n//          }\n//\n//          for (int i = 0; i < nums.length; i++) {\n//              int complement = target - nums[i];\n//              if (hmap.containsKey(complement) && hmap.get(complement) != i) {\n//                  return new int[] {i, hmap.get(complement)};\n//              }\n//          }\n//          return null;\n//      }\n\n    //  O(N) time complexity\n    //  1-pass HashMap\n    static int[] twoSum(int[] nums, int target) {\n        Map<Integer, Integer> hmap = new HashMap<>();\n\n        for (int i = 0; i < nums.length; i++) {\n            int complement = target - nums[i];\n            if (hmap.containsKey(complement)) {\n                return new int[] {hmap.get(complement), i};\n            }\n            hmap.put(nums[i], i);\n        }\n        return null;\n    }\n\n    public static void main(String[] args) {\n        //Output: [0,1]\n        int[] nums1 = {2,7,11,15};\n        int target1 = 9;\n\n        //Output: [1,2]\n        int[] nums2 = {3,2,4};\n        int target2 = 6;\n\n        //Output: [0,1]\n        int[] nums3 = {3,3};\n        int target3 = 6;\n\n        System.out.println(Arrays.toString(twoSum(nums1, target1)));\n        System.out.println(Arrays.toString(twoSum(nums2, target2)));\n        System.out.println(Arrays.toString(twoSum(nums3, target3)));\n    }\n}\n"))))),(0,r.kt)("details",null,(0,r.kt)("summary",null," 3Sum (Expand/Collapse) "),(0,r.kt)("h3",{id:"-see-leetcode-problem-15"},(0,r.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/3sum/"},"\u2197 See LeetCode Problem #15")),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Solution {\n    static List<List<Integer>> threeSum(int[] nums) {\n        Arrays.sort(nums);\n        List<List<Integer>> tripletList = new ArrayList<>();\n\n        for (int i = 0; i < nums.length - 2; i++) {\n            if (i > 0 && nums[i] == nums[i - 1]) {\n                continue;\n            }\n            //  -nums[i] is the negative of one of the triplets that add up to zero\n            //  Hence, -nums[i] should be equal to twoSum (sum of the remaining 2 triplets)\n            //      calculated in the findTriplets method below\n            findTriplets(nums, -nums[i], i + 1, tripletList);\n        }\n        return tripletList;\n    }\n\n    //  leftPointer < rightPointer\n    static void findTriplets (int[] nums,\n                             int twoSum,\n                             int leftPointer,\n                             List<List<Integer>> tripletList) {\n        int rightPointer = nums.length - 1;\n\n        while (leftPointer < rightPointer) {\n            int currentSum = nums[leftPointer] + nums[rightPointer];\n            if (currentSum == twoSum) {\n                tripletList.add(List.of(-twoSum,\n                        nums[leftPointer],\n                        nums[rightPointer]));\n                leftPointer++;\n                rightPointer--;\n                while (leftPointer < rightPointer &&\n                        nums[leftPointer] == nums[leftPointer - 1]) {\n                    leftPointer++;\n                }\n                while (leftPointer < rightPointer &&\n                        nums[rightPointer] == nums[rightPointer + 1]) {\n                    rightPointer--;\n                }\n            } else if (twoSum > currentSum) {\n                //  Needs to increase currentSum\n                leftPointer++;\n            } else {\n                //  Needs to decrease currentSum\n                rightPointer--;\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n\n        // Example 1:\n        int[] nums1 = {-1,0,1,2,-1,-4};\n        //Output: [[-1,-1,2],[-1,0,1]]\n\n        // Example 2:\n        int[] nums2 = {0,1,1};\n        //Output: []\n\n        // Example 3:\n        int[] nums3 = {0,0,0};\n        //Output: [[0,0,0]]\n\n        System.out.println(threeSum(nums1));\n        System.out.println(threeSum(nums2));\n        System.out.println(threeSum(nums3));\n\n    }\n}\n"))))))}c.isMDXComponent=!0}}]);