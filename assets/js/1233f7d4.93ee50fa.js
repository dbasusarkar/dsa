"use strict";(self.webpackChunkdsa=self.webpackChunkdsa||[]).push([[7898],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>v});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),d=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=d(e.components);return r.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=d(n),v=a,m=p["".concat(o,".").concat(v)]||p[v]||c[v]||l;return n?r.createElement(m,s(s({ref:t},u),{},{components:n})):r.createElement(m,s({ref:t},u))}));function v(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,s=new Array(l);s[0]=p;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var d=2;d<l;d++)s[d]=n[d];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(7294),a=n(6010);const l="tabItem_Ymn6";function s(e){let{children:t,hidden:n,className:s}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(l,s),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>v});var r=n(7462),a=n(7294),l=n(6010),s=n(2389),i=n(7392),o=n(7094),d=n(2466);const u="tabList__CuJ",c="tabItem_LNqP";function p(e){var t;const{lazy:n,block:s,defaultValue:p,values:v,groupId:m,className:b}=e,f=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),h=v??f.map((e=>{let{props:{value:t,label:n,attributes:r}}=e;return{value:t,label:n,attributes:r}})),k=(0,i.l)(h,((e,t)=>e.value===t.value));if(k.length>0)throw new Error(`Docusaurus error: Duplicate values "${k.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const y=null===p?p:p??(null==(t=f.find((e=>e.props.default)))?void 0:t.props.value)??f[0].props.value;if(null!==y&&!h.some((e=>e.value===y)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${y}" but none of its children has the corresponding value. Available values are: ${h.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:L,setTabGroupChoices:N}=(0,o.U)(),[g,w]=(0,a.useState)(y),x=[],{blockElementScrollPositionUntilNextRender:O}=(0,d.o5)();if(null!=m){const e=L[m];null!=e&&e!==g&&h.some((t=>t.value===e))&&w(e)}const E=e=>{const t=e.currentTarget,n=x.indexOf(t),r=h[n].value;r!==g&&(O(t),w(r),null!=m&&N(m,String(r)))},T=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{const t=x.indexOf(e.currentTarget)+1;n=x[t]??x[0];break}case"ArrowLeft":{const t=x.indexOf(e.currentTarget)-1;n=x[t]??x[x.length-1];break}}null==(t=n)||t.focus()};return a.createElement("div",{className:(0,l.Z)("tabs-container",u)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":s},b)},h.map((e=>{let{value:t,label:n,attributes:s}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:g===t?0:-1,"aria-selected":g===t,key:t,ref:e=>x.push(e),onKeyDown:T,onFocus:E,onClick:E},s,{className:(0,l.Z)("tabs__item",c,null==s?void 0:s.className,{"tabs__item--active":g===t})}),n??t)}))),n?(0,a.cloneElement)(f.filter((e=>e.props.value===g))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},f.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==g})))))}function v(e){const t=(0,s.Z)();return a.createElement(p,(0,r.Z)({key:String(t)},e))}},8548:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>v,frontMatter:()=>i,metadata:()=>d,toc:()=>c});var r=n(7462),a=(n(7294),n(3905)),l=n(5488),s=n(5162);const i={sidebar_position:5,id:"e-linked-list-reversal",title:"Linked List Reversal",tags:["linked-list-reversal","reverse-linked-list"]},o="Linked List Reversal",d={unversionedId:"patterns/e-linked-list-reversal",id:"patterns/e-linked-list-reversal",title:"Linked List Reversal",description:"- Understanding linked list reversal",source:"@site/docs/patterns/e-linked-list-reversal.md",sourceDirName:"patterns",slug:"/patterns/e-linked-list-reversal",permalink:"/dsa/docs/patterns/e-linked-list-reversal",draft:!1,tags:[{label:"linked-list-reversal",permalink:"/dsa/docs/tags/linked-list-reversal"},{label:"reverse-linked-list",permalink:"/dsa/docs/tags/reverse-linked-list"}],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,id:"e-linked-list-reversal",title:"Linked List Reversal",tags:["linked-list-reversal","reverse-linked-list"]},sidebar:"docs",previous:{title:"Intervals",permalink:"/dsa/docs/patterns/d-intervals"},next:{title:"Subsets",permalink:"/dsa/docs/patterns/f-subsets"}},u={},c=[{value:"Problems related to linked list reversal",id:"problems-related-to-linked-list-reversal",level:2},{value:"\u2197 See LeetCode Problem #206",id:"-see-leetcode-problem-206",level:3}],p={toc:c};function v(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"linked-list-reversal"},"Linked List Reversal"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Understanding linked list reversal "),(0,a.kt)("li",{parentName:"ul"},"Solved problems are presented in alphabetical order")),(0,a.kt)("h2",{id:"problems-related-to-linked-list-reversal"},"Problems related to linked list reversal"),(0,a.kt)("details",null,(0,a.kt)("summary",null," Reverse Linked List "),(0,a.kt)("h3",{id:"-see-leetcode-problem-206"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/reverse-linked-list/"},"\u2197 See LeetCode Problem #206")),(0,a.kt)(l.Z,{mdxType:"Tabs"},(0,a.kt)(s.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\n\nclass ListNode {\n    int data;\n    ListNode next;\n\n    ListNode(int data) {\n        this.data = data;\n        this.next = null;\n    }\n}\n\n//class LinkedList {\n//\n//\n//\n//}\n\nclass Solution {\n\n//    static ListNode reverseList(ListNode head) {\n    static int reverseList(ListNode head) {\n\n        ListNode prev = null;\n\n        while (head != null) {\n            ListNode next = head.next;\n            head.next = prev;\n            prev = head;\n            head = next;\n        }\n\n//        return prev;\n        return prev.data;\n    }\n\n    static int countNodes (ListNode head) {\n\n        int count = 1;\n        ListNode current = head;\n\n        while (current.next != null){\n\n            current = current.next;\n            count++;\n\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n\n        int[] headArray = {1,2,3,4,5};\n\n        ListNode head = new ListNode(headArray[0]);\n        ListNode current = head;\n\n        for (int i = 1; i < headArray.length; i++) {\n\n            ListNode node = new ListNode(headArray[i]);\n            current.next = node;\n            current = node;\n\n        }\n\n//        ListNode nodeA = new ListNode(1);\n//        ListNode nodeB = new ListNode(2);\n//        ListNode nodeC = new ListNode(3);\n//        ListNode nodeD = new ListNode(4);\n//        ListNode nodeE = new ListNode(5);\n//\n//        nodeA.next = nodeB;\n//        nodeB.next = nodeC;\n//        nodeC.next = nodeD;\n//        nodeD.next = nodeE;\n\n        System.out.println(countNodes(head));\n        System.out.println(reverseList(head));\n\n//        System.out.println();\n//        System.out.println(countNodes(nodeA));\n//        System.out.println(reverseList(nodeA));\n\n    }\n}\n"))))))}v.isMDXComponent=!0}}]);