"use strict";(self.webpackChunkdsa=self.webpackChunkdsa||[]).push([[6766],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>c});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=r.createContext({}),u=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},m=function(e){var n=u(e.components);return r.createElement(o.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),p=u(t),c=a,b=p["".concat(o,".").concat(c)]||p[c]||d[c]||l;return t?r.createElement(b,s(s({ref:n},m),{},{components:t})):r.createElement(b,s({ref:n},m))}));function c(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,s=new Array(l);s[0]=p;var i={};for(var o in n)hasOwnProperty.call(n,o)&&(i[o]=n[o]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var u=2;u<l;u++)s[u]=t[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>s});var r=t(7294),a=t(6010);const l="tabItem_Ymn6";function s(e){let{children:n,hidden:t,className:s}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(l,s),hidden:t},n)}},5488:(e,n,t)=>{t.d(n,{Z:()=>c});var r=t(7462),a=t(7294),l=t(6010),s=t(2389),i=t(7392),o=t(7094),u=t(2466);const m="tabList__CuJ",d="tabItem_LNqP";function p(e){var n;const{lazy:t,block:s,defaultValue:p,values:c,groupId:b,className:v}=e,h=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),g=c??h.map((e=>{let{props:{value:n,label:t,attributes:r}}=e;return{value:n,label:t,attributes:r}})),f=(0,i.l)(g,((e,n)=>e.value===n.value));if(f.length>0)throw new Error(`Docusaurus error: Duplicate values "${f.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const y=null===p?p:p??(null==(n=h.find((e=>e.props.default)))?void 0:n.props.value)??h[0].props.value;if(null!==y&&!g.some((e=>e.value===y)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${y}" but none of its children has the corresponding value. Available values are: ${g.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:x,setTabGroupChoices:k}=(0,o.U)(),[S,I]=(0,a.useState)(y),E=[],{blockElementScrollPositionUntilNextRender:w}=(0,u.o5)();if(null!=b){const e=x[b];null!=e&&e!==S&&g.some((n=>n.value===e))&&I(e)}const P=e=>{const n=e.currentTarget,t=E.indexOf(n),r=g[t].value;r!==S&&(w(n),I(r),null!=b&&k(b,String(r)))},T=e=>{var n;let t=null;switch(e.key){case"ArrowRight":{const n=E.indexOf(e.currentTarget)+1;t=E[n]??E[0];break}case"ArrowLeft":{const n=E.indexOf(e.currentTarget)-1;t=E[n]??E[E.length-1];break}}null==(n=t)||n.focus()};return a.createElement("div",{className:(0,l.Z)("tabs-container",m)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":s},v)},g.map((e=>{let{value:n,label:t,attributes:s}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:S===n?0:-1,"aria-selected":S===n,key:n,ref:e=>E.push(e),onKeyDown:T,onFocus:P,onClick:P},s,{className:(0,l.Z)("tabs__item",d,null==s?void 0:s.className,{"tabs__item--active":S===n})}),t??n)}))),t?(0,a.cloneElement)(h.filter((e=>e.props.value===S))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},h.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==S})))))}function c(e){const n=(0,s.Z)();return a.createElement(p,(0,r.Z)({key:String(n)},e))}},9241:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>u,toc:()=>d});var r=t(7462),a=(t(7294),t(3905)),l=t(5488),s=t(5162);const i={sidebar_position:12,id:"k-math",title:"Math",tags:["math","palindrome-number","reverse-integer","roman-to-integer","squares-of-a-sorted-array"]},o="Math",u={unversionedId:"patterns/k-math",id:"patterns/k-math",title:"Math",description:"- Understanding math",source:"@site/docs/patterns/k-math.md",sourceDirName:"patterns",slug:"/patterns/k-math",permalink:"/dsa/docs/patterns/k-math",draft:!1,tags:[{label:"math",permalink:"/dsa/docs/tags/math"},{label:"palindrome-number",permalink:"/dsa/docs/tags/palindrome-number"},{label:"reverse-integer",permalink:"/dsa/docs/tags/reverse-integer"},{label:"roman-to-integer",permalink:"/dsa/docs/tags/roman-to-integer"},{label:"squares-of-a-sorted-array",permalink:"/dsa/docs/tags/squares-of-a-sorted-array"}],version:"current",sidebarPosition:12,frontMatter:{sidebar_position:12,id:"k-math",title:"Math",tags:["math","palindrome-number","reverse-integer","roman-to-integer","squares-of-a-sorted-array"]},sidebar:"docs",previous:{title:"Matrices",permalink:"/dsa/docs/patterns/j-matrices"},next:{title:"Geometry",permalink:"/dsa/docs/patterns/l-geometry"}},m={},d=[{value:"Problems related to math",id:"problems-related-to-math",level:2},{value:"\u2197 See LeetCode Problem #9",id:"-see-leetcode-problem-9",level:3},{value:"\u2197 See LeetCode Problem #7",id:"-see-leetcode-problem-7",level:3},{value:"\u2197 See LeetCode Problem #13",id:"-see-leetcode-problem-13",level:3},{value:"\u2197 See LeetCode Problem #977",id:"-see-leetcode-problem-977",level:3}],p={toc:d};function c(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"math"},"Math"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Understanding math "),(0,a.kt)("li",{parentName:"ul"},"Solved problems are presented in alphabetical order")),(0,a.kt)("h2",{id:"problems-related-to-math"},"Problems related to math"),(0,a.kt)("details",null,(0,a.kt)("summary",null," Palindrome Number (Expand/Collapse) "),(0,a.kt)("h3",{id:"-see-leetcode-problem-9"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/palindrome-number/"},"\u2197 See LeetCode Problem #9")),(0,a.kt)(l.Z,{mdxType:"Tabs"},(0,a.kt)(s.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"public class Solution {\n    static boolean isPalindrome(int x) {\n\n        if (x < 0) {\n            return false;\n        }\n\n        int tempX = x;\n        int reversedX = 0;\n\n        while (tempX > 0) {\n            int remainderTempX = tempX % 10;\n            reversedX = reversedX * 10 + remainderTempX;\n            tempX = tempX / 10;\n        }\n\n        if (reversedX == x) {\n            return true;\n        } else {\n            return false;\n        }\n\n    }\n\n    public static void main(String[] args) {\n\n        // Example 1:\n        int x1 = 121;\n        //  O/P: true\n\n        // Example 2:\n        int x2 = -121;\n        //  O/P: false\n\n        // Example 3:\n        int x3 = 10;\n        //  O/P: false\n\n        System.out.println(isPalindrome(x1));\n        System.out.println(isPalindrome(x2));\n        System.out.println(isPalindrome(x3));\n    }\n}\n"))))),(0,a.kt)("details",null,(0,a.kt)("summary",null," Reverse Integer (Expand/Collapse) "),(0,a.kt)("h3",{id:"-see-leetcode-problem-7"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/reverse-integer/"},"\u2197 See LeetCode Problem #7")),(0,a.kt)(l.Z,{mdxType:"Tabs"},(0,a.kt)(s.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"public class Solution {\n    static int reverse(int x) {\n\n        //  Initialize the reversed integer to be built\n        int reversedInt = 0;\n\n        //  Check until given integer x is not 0,\n        //      since x is divided by 10 in every step\n        while (x != 0) {\n            //  Find the remainder to pop the last digit\n            int remainder = x % 10;\n            //  Divide by 10 to get rid of the last digit\n            x /= 10;\n\n            //  Check overflow condition on the positive side\n            if (reversedInt > Integer.MAX_VALUE / 10 ||\n                    (reversedInt == Integer.MAX_VALUE / 10 &&\n                            remainder > 7)) {\n                return 0;\n            }\n\n            //  Check overflow condition on the negative side\n            if (reversedInt < Integer.MIN_VALUE / 10 ||\n                    (reversedInt == Integer.MIN_VALUE / 10 &&\n                            remainder < -8)) {\n                return 0;\n            }\n\n            //  Build the reversed integer\n            reversedInt = reversedInt * 10 + remainder;\n        }\n        return reversedInt;\n    }\n\n    public static void main(String[] args) {\n        // Example 1:\n        int x1 = 123;\n        //  O/P: 321\n\n        // Example 2:\n        int x2 = -123;\n        //  O/P: -321\n\n        // Example 3:\n        int x3 = 120;\n        //  O/P: 21\n\n        System.out.println(reverse(x1));\n        System.out.println(reverse(x2));\n        System.out.println(reverse(x3));\n    }\n}\n"))))),(0,a.kt)("details",null,(0,a.kt)("summary",null," Roman to Integer (Expand/Collapse) "),(0,a.kt)("h3",{id:"-see-leetcode-problem-13"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/roman-to-integer/"},"\u2197 See LeetCode Problem #13")),(0,a.kt)(l.Z,{mdxType:"Tabs"},(0,a.kt)(s.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},'import java.util.HashMap;\nimport java.util.Map;\n\npublic class Solution {\n    static int romanToInt(String s) {\n\n        Map<String, Integer> valuesMap = new HashMap<>();\n\n        valuesMap.put("M", 1000);\n        valuesMap.put("D", 500);\n        valuesMap.put("C", 100);\n        valuesMap.put("L", 50);\n        valuesMap.put("X", 10);\n        valuesMap.put("V", 5);\n        valuesMap.put("I", 1);\n\n        int index = 0;\n        int totalSum = 0;\n\n        while (index < s.length()) {\n\n            String currentSymbol = s.substring(index, index +1);\n            int currentValue = valuesMap.get(currentSymbol);\n\n            int nextValue = 0;\n\n            if (index < s.length() - 1) {\n                String nextSymbol = s.substring(index + 1, index + 2);\n                nextValue = valuesMap.get(nextSymbol);\n            }\n\n            if (currentValue < nextValue) {\n                totalSum += (nextValue - currentValue);\n                index += 2;\n            } else {\n                totalSum += currentValue;\n                index += 1;\n            }\n        }\n       return totalSum;\n    }\n\n    public static void main(String[] args) {\n\n        // Example 1:\n        String s1 = "III";\n        //  O/P: 3\n\n        // Example 2:\n        String s2 = "LVIII";\n        //  O/P: 58\n\n        // Example 3:\n        String s3 = "MCMXCIV";\n        //  O/P: 1994\n\n        System.out.println(romanToInt(s1));\n        System.out.println(romanToInt(s2));\n        System.out.println(romanToInt(s3));\n    }\n}\n'))))),(0,a.kt)("details",null,(0,a.kt)("summary",null," Squares of a Sorted Array (Expand/Collapse) "),(0,a.kt)("h3",{id:"-see-leetcode-problem-977"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/squares-of-a-sorted-array/"},"\u2197 See LeetCode Problem #977")),(0,a.kt)(l.Z,{mdxType:"Tabs"},(0,a.kt)(s.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"import java.util.Arrays;\n\npublic class Solution {\n    public static int[] sortedSquares(int[] nums) {\n        int leftIndex = 0;\n        int rightIndex = nums.length - 1;\n        int[] squaredArray = new int[nums.length];\n\n        for (int i = nums.length - 1; i >= 0; i--) {\n            if (Math.abs(nums[leftIndex]) < Math.abs(nums[rightIndex])) {\n                squaredArray[i] = nums[rightIndex] * nums[rightIndex];\n                rightIndex--;\n            } else {\n               squaredArray[i] = nums[leftIndex] * nums[leftIndex];\n               leftIndex++;\n            }\n        }\n\n        return squaredArray;\n    }\n\n    public static void main(String[] args) {\n        // Example 1:\n        int[] nums1 = {-4,-1,0,3,10};\n        //  O/P: [0,1,9,16,100]\n\n        // Example 2:\n        int[] nums2 = {-7,-3,2,3,11};\n        //  O/P: [4,9,9,49,121]\n\n        System.out.println(Arrays.toString(sortedSquares(nums1)));\n        System.out.println(Arrays.toString(sortedSquares(nums2)));\n    }\n}\n"))))))}c.isMDXComponent=!0}}]);