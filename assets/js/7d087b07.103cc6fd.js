"use strict";(self.webpackChunkdsa=self.webpackChunkdsa||[]).push([[97],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>p});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function d(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?d(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):d(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},d=Object.keys(e);for(a=0;a<d.length;a++)t=d[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(e);for(a=0;a<d.length;a++)t=d[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var r=a.createContext({}),l=function(e){var n=a.useContext(r),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=l(e.components);return a.createElement(r.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,d=e.originalType,r=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),h=l(t),p=i,m=h["".concat(r,".").concat(p)]||h[p]||c[p]||d;return t?a.createElement(m,o(o({ref:n},u),{},{components:t})):a.createElement(m,o({ref:n},u))}));function p(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var d=t.length,o=new Array(d);o[0]=h;var s={};for(var r in n)hasOwnProperty.call(n,r)&&(s[r]=n[r]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var l=2;l<d;l++)o[l]=t[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>o});var a=t(7294),i=t(6010);const d="tabItem_Ymn6";function o(e){let{children:n,hidden:t,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,i.Z)(d,o),hidden:t},n)}},5488:(e,n,t)=>{t.d(n,{Z:()=>p});var a=t(7462),i=t(7294),d=t(6010),o=t(2389),s=t(7392),r=t(7094),l=t(2466);const u="tabList__CuJ",c="tabItem_LNqP";function h(e){var n;const{lazy:t,block:o,defaultValue:h,values:p,groupId:m,className:N}=e,L=i.Children.map(e.children,(e=>{if((0,i.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),v=p??L.map((e=>{let{props:{value:n,label:t,attributes:a}}=e;return{value:n,label:t,attributes:a}})),x=(0,s.l)(v,((e,n)=>e.value===n.value));if(x.length>0)throw new Error(`Docusaurus error: Duplicate values "${x.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const b=null===h?h:h??(null==(n=L.find((e=>e.props.default)))?void 0:n.props.value)??L[0].props.value;if(null!==b&&!v.some((e=>e.value===b)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${b}" but none of its children has the corresponding value. Available values are: ${v.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:f,setTabGroupChoices:y}=(0,r.U)(),[k,g]=(0,i.useState)(b),w=[],{blockElementScrollPositionUntilNextRender:S}=(0,l.o5)();if(null!=m){const e=f[m];null!=e&&e!==k&&v.some((n=>n.value===e))&&g(e)}const E=e=>{const n=e.currentTarget,t=w.indexOf(n),a=v[t].value;a!==k&&(S(n),g(a),null!=m&&y(m,String(a)))},C=e=>{var n;let t=null;switch(e.key){case"ArrowRight":{const n=w.indexOf(e.currentTarget)+1;t=w[n]??w[0];break}case"ArrowLeft":{const n=w.indexOf(e.currentTarget)-1;t=w[n]??w[w.length-1];break}}null==(n=t)||n.focus()};return i.createElement("div",{className:(0,d.Z)("tabs-container",u)},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,d.Z)("tabs",{"tabs--block":o},N)},v.map((e=>{let{value:n,label:t,attributes:o}=e;return i.createElement("li",(0,a.Z)({role:"tab",tabIndex:k===n?0:-1,"aria-selected":k===n,key:n,ref:e=>w.push(e),onKeyDown:C,onFocus:E,onClick:E},o,{className:(0,d.Z)("tabs__item",c,null==o?void 0:o.className,{"tabs__item--active":k===n})}),t??n)}))),t?(0,i.cloneElement)(L.filter((e=>e.props.value===k))[0],{className:"margin-top--md"}):i.createElement("div",{className:"margin-top--md"},L.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==k})))))}function p(e){const n=(0,o.Z)();return i.createElement(h,(0,a.Z)({key:String(n)},e))}},2556:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>r,default:()=>p,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var a=t(7462),i=(t(7294),t(3905)),d=t(5488),o=t(5162);const s={sidebar_position:3,id:"c-linked-lists",title:"Linked Lists",tags:["intersection-of-two-linked-lists","linked-lists","linked-list-cycle","lru-cache","merge-two-sorted-lists","middle-of-the-linked-list","palindrome-linked-list","reverse-linked-list"]},r="Linked Lists",l={unversionedId:"data-structures/c-linked-lists",id:"data-structures/c-linked-lists",title:"Linked Lists",description:"- Understanding linked lists",source:"@site/docs/data-structures/c-linked-lists.md",sourceDirName:"data-structures",slug:"/data-structures/c-linked-lists",permalink:"/dsa/docs/data-structures/c-linked-lists",draft:!1,tags:[{label:"intersection-of-two-linked-lists",permalink:"/dsa/docs/tags/intersection-of-two-linked-lists"},{label:"linked-lists",permalink:"/dsa/docs/tags/linked-lists"},{label:"linked-list-cycle",permalink:"/dsa/docs/tags/linked-list-cycle"},{label:"lru-cache",permalink:"/dsa/docs/tags/lru-cache"},{label:"merge-two-sorted-lists",permalink:"/dsa/docs/tags/merge-two-sorted-lists"},{label:"middle-of-the-linked-list",permalink:"/dsa/docs/tags/middle-of-the-linked-list"},{label:"palindrome-linked-list",permalink:"/dsa/docs/tags/palindrome-linked-list"},{label:"reverse-linked-list",permalink:"/dsa/docs/tags/reverse-linked-list"}],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,id:"c-linked-lists",title:"Linked Lists",tags:["intersection-of-two-linked-lists","linked-lists","linked-list-cycle","lru-cache","merge-two-sorted-lists","middle-of-the-linked-list","palindrome-linked-list","reverse-linked-list"]},sidebar:"docs",previous:{title:"Strings",permalink:"/dsa/docs/data-structures/b-strings"},next:{title:"Hash Table",permalink:"/dsa/docs/data-structures/d-hash-table"}},u={},c=[{value:"Problems related to strings",id:"problems-related-to-strings",level:2},{value:"\u2197 See LeetCode Problem #160",id:"-see-leetcode-problem-160",level:3},{value:"\u2197 See LeetCode Problem #141",id:"-see-leetcode-problem-141",level:3},{value:"\u2197 See LeetCode Problem #146",id:"-see-leetcode-problem-146",level:3},{value:"\u2197 See LeetCode Problem #21",id:"-see-leetcode-problem-21",level:3},{value:"\u2197 See LeetCode Problem #876",id:"-see-leetcode-problem-876",level:3},{value:"\u2197 See LeetCode Problem #234",id:"-see-leetcode-problem-234",level:3},{value:"\u2197 See LeetCode Problem #19",id:"-see-leetcode-problem-19",level:3},{value:"\u2197 See LeetCode Problem #143",id:"-see-leetcode-problem-143",level:3},{value:"\u2197 See LeetCode Problem #234",id:"-see-leetcode-problem-234-1",level:3},{value:"\u2197 See LeetCode Problem #206",id:"-see-leetcode-problem-206",level:3}],h={toc:c};function p(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"linked-lists"},"Linked Lists"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Understanding linked lists "),(0,i.kt)("li",{parentName:"ul"},"Solved problems are presented in alphabetical order")),(0,i.kt)("h2",{id:"problems-related-to-strings"},"Problems related to strings"),(0,i.kt)("details",null,(0,i.kt)("summary",null," Intersection of Two Linked Lists "),(0,i.kt)("h3",{id:"-see-leetcode-problem-160"},(0,i.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/intersection-of-two-linked-lists/"},"\u2197 See LeetCode Problem #160")),(0,i.kt)(d.Z,{mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"//  Needs to work on intersection of linked lists\nclass ListNode {\n    int data;\n    ListNode next;\n\n    ListNode (int data) {\n        this.data = data;\n    }\n}\n\npublic class Solution {\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\n    static ListNode getIntersectionNode(ListNode headA, ListNode headB) {\n\n        if (headA == null || headB == null) {\n            return null;\n        }\n\n        ListNode a_pointer = headA;\n        ListNode b_pointer = headB;\n\n        while (a_pointer != b_pointer) {\n\n            a_pointer = a_pointer == null ? headB : a_pointer.next;\n            b_pointer = b_pointer == null ? headA : b_pointer.next;\n\n        }\n\n        return a_pointer;\n\n    }\n\n    public static void main(String[] args) {\n        //Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2\n        //, skipB = 3\n        //Output: Intersected at '8'\n        //Explanation: The intersected node's value is 8 (note that this must not be 0\n        //if the two lists intersect).\n        //From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [\n        //5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3\n        //nodes before the intersected node in B.\n        //\n        //\n        // Example 2:\n        //\n        //\n        //Input: intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3,\n        //skipB = 1\n        //Output: Intersected at '2'\n        //Explanation: The intersected node's value is 2 (note that this must not be 0\n        //if the two lists intersect).\n        //From the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [\n        //3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node\n        //before the intersected node in B.\n        //\n        //\n        // Example 3:\n//        int[] listA = {2,6,4};\n        int[] listA = {1,9,1,2,4};\n//        int[] listB = {1,5};\n        int[] listB = {3,2,4};\n        //  O/P: No intersection\n\n        ListNode head3A = new ListNode(listA[0]);\n        ListNode current3A = head3A;\n\n        for (int i = 1; i < listA.length; i++) {\n\n            ListNode node = new ListNode(listA[i]);\n\n            current3A.next = node;\n            current3A = node;\n        }\n\n        ListNode head3B = new ListNode(listB[0]);\n        ListNode current3B = head3B;\n\n        for (int i = 1; i < listB.length; i++) {\n\n            ListNode node = new ListNode(listB[i]);\n\n            current3B.next = node;\n            current3B = node;\n        }\n\n        System.out.println(getIntersectionNode(head3A,head3B));\n   }\n}\n"))))),(0,i.kt)("details",null,(0,i.kt)("summary",null," Linked List Cycle "),(0,i.kt)("h3",{id:"-see-leetcode-problem-141"},(0,i.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/linked-list-cycle/"},"\u2197 See LeetCode Problem #141")),(0,i.kt)(d.Z,{mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},'//  Needs work to make Linked list cycle\n\nclass ListNode {\n    int data;\n    ListNode next;\n\n    ListNode (int data) {\n        this.data = data;\n    }\n}\n\npublic class Solution {\n/**\n * Definition for singly-linked list.\n * class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\n    static boolean hasCycle(ListNode head) {\n\n        ListNode slow = head;\n        ListNode fast = head;\n\n        while (fast != null && fast.next != null) {\n            slow = slow.next;\n            fast = fast.next.next;\n\n            if (fast == slow) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    public static void main(String[] args) {\n\n        int[] head1Array = {3,2,0,-4};\n        int pos1 = 1;\n        //  O/P: true\n\n        ListNode head1 = new ListNode(head1Array[0]);\n        ListNode current1 = head1;\n        ListNode startNode1 = new ListNode(head1Array[pos1]);\n\n//        for (int i = 1; i < head1Array.length; i++) {\n//\n//            ListNode node = new ListNode(head1Array[i]);\n//\n//            current1.next = node;\n//            current1 = node;\n//        }\n//\n//        current1.next = new ListNode(head1Array[1]);\n\n        int count1 = 1;\n        while(current1.next != null) {\n           if (count1 == pos1) {\n               startNode1 = current1;\n           }\n           current1 = current1.next;\n           count1++;\n        }\n\n        current1.next = startNode1;\n\n        // Example 2:\n        int[] head2Array = {1,2};\n        //int pos2 = 0;\n        //  O/P: true\n\n        ListNode head2 = new ListNode(head2Array[0]);\n        ListNode current2 = head2;\n\n        for (int i = 1; i < head2Array.length; i++) {\n\n            ListNode node = new ListNode(head2Array[i]);\n\n            current2.next = node;\n            current2 = node;\n        }\n\n        // Example 3:\n        int[] head3Array = {1};\n        //int pos3 = -1;\n        //  O/P: false\n\n        ListNode head3 = new ListNode(head3Array[0]);\n        ListNode current3 = head3;\n\n        for (int i = 1; i < head3Array.length; i++) {\n\n            ListNode node = new ListNode(head3Array[i]);\n\n            current3.next = node;\n            current3 = node;\n        }\n\n        System.out.println("Example 1: " + hasCycle(head1));\n        System.out.println("Example 2: " + hasCycle(head2));\n        System.out.println("Example 3: " + hasCycle(head3));\n    }\n}\n'))))),(0,i.kt)("details",null,(0,i.kt)("summary",null," LRU Cache "),(0,i.kt)("h3",{id:"-see-leetcode-problem-146"},(0,i.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/lru-cache/"},"\u2197 See LeetCode Problem #146")),(0,i.kt)(d.Z,{mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},'import java.util.Map;\nimport java.util.HashMap;\n\nclass LRUCache {\n\n    class DoublyLinkedNode {\n        int key;\n        int value;\n        DoublyLinkedNode previousNode;\n        DoublyLinkedNode nextNode;\n    }\n\n    private Map<Integer, DoublyLinkedNode> cacheMap = new HashMap<>();\n    private int cacheSize;\n    private int cacheCapacity;\n    private DoublyLinkedNode head;\n    private DoublyLinkedNode tail;\n\n    //  Add node at the front but after the dummy head node\n    private void addNode(DoublyLinkedNode node) {\n        node.previousNode = head;\n        node.nextNode = head.nextNode;\n\n        head.nextNode.previousNode = node;\n        head.nextNode = node;\n    }\n\n    private void removeNode(DoublyLinkedNode node) {\n        DoublyLinkedNode previousNode = node.previousNode;\n        DoublyLinkedNode nextNode = node.nextNode;\n\n        previousNode.nextNode = nextNode;\n        nextNode.previousNode = previousNode;\n    }\n\n    //  Move an existing node at the front but after the dummy head node\n    private void moveToFront(DoublyLinkedNode node) {\n        removeNode(node);\n        addNode(node);\n    }\n\n    //  Remove the last node, which is an existing node\n    //      right before the dummy tail\n    private DoublyLinkedNode popEndNode() {\n        DoublyLinkedNode endNode = tail.previousNode;\n        removeNode(endNode);\n        return endNode;\n    }\n\n    public LRUCache(int capacity) {\n        this.cacheSize = 0;\n        this.cacheCapacity = capacity;\n\n        head = new DoublyLinkedNode();\n        tail = new DoublyLinkedNode();\n\n        head.nextNode = tail;\n        tail.previousNode = head;\n    }\n\n    public int get(int key) {\n        DoublyLinkedNode node = cacheMap.get(key);\n\n        if (node == null) {\n            return -1;\n        }\n\n        moveToFront(node);\n\n        return node.value;\n    }\n\n    public void put(int key, int value) {\n        DoublyLinkedNode node = cacheMap.get(key);\n\n        if (node == null) {\n            DoublyLinkedNode updatedNode = new DoublyLinkedNode();\n            updatedNode.key = key;\n            updatedNode.value = value;\n\n            cacheMap.put(key, updatedNode);\n            addNode(updatedNode);\n\n            //  Increase the size the LRUCache by 1\n            ++cacheSize;\n\n            if (cacheSize > cacheCapacity) {\n                DoublyLinkedNode endNode = popEndNode();\n                cacheMap.remove(endNode.key);\n\n                //  Decrease the size the LRUCache by 1\n                --cacheSize;\n            }\n        } else {\n            node.value = value;\n            moveToFront(node);\n        }\n    }\n}\n\nclass Solution {\n\n    public static void main(String[] args) {\n\n        // Example 1:\n        //Input\n        //["LRUCache", "put", "put", "get", "put", "get", "put", "get", "get", "get"]\n        //[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]\n\n        LRUCache lruCache = new LRUCache(2);\n\n        lruCache.put(1, 1);\n        lruCache.put(2, 2);\n        System.out.println(lruCache.get(1));\n\n        lruCache.put(3, 3);\n        System.out.println(lruCache.get(2));\n\n        lruCache.put(4, 4);\n        System.out.println(lruCache.get(1));\n        System.out.println(lruCache.get(3));\n        System.out.println(lruCache.get(4));\n\n        //Output\n        //[null, null, null, 1, null, -1, null, -1, 3, 4]\n        //\n        //Explanation\n        //LRUCache lRUCache = new LRUCache(2);\n        //lRUCache.put(1, 1); // cache is {1=1}\n        //lRUCache.put(2, 2); // cache is {1=1, 2=2}\n        //lRUCache.get(1);    // return 1\n        //lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}\n        //lRUCache.get(2);    // returns -1 (not found)\n        //lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}\n        //lRUCache.get(1);    // return -1 (not found)\n        //lRUCache.get(3);    // return 3\n        //lRUCache.get(4);    // return 4\n    }\n}\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache obj = new LRUCache(capacity);\n * int param_1 = obj.get(key);\n * obj.put(key,value);\n */\n'))))),(0,i.kt)("details",null,(0,i.kt)("summary",null," Merge Two Sorted Lists "),(0,i.kt)("h3",{id:"-see-leetcode-problem-21"},(0,i.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/merge-two-sorted-lists/"},"\u2197 See LeetCode Problem #21")),(0,i.kt)(d.Z,{mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},'class ListNode {\n    int data;\n    ListNode next;\n\n    ListNode(int num) {\n        this.data = num;\n        this.next = null;\n    }\n}\n\npublic class Solution {\n    /**\n     * Definition for singly-linked list.\n     * public class ListNode {\n     * int val;\n     * ListNode next;\n     * ListNode() {}\n     * ListNode(int val) { this.val = val; }\n     * ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n     * }\n     */\n\n    static ListNode merge(ListNode head1, ListNode head2) {\n\n        ListNode mergedList;\n        if (head1 == null) {\n            return head2;\n        }\n        if (head2 == null) {\n            return head1;\n        }\n        if (head1.data < head2.data) {\n            //point to smaller element\n            mergedList = head1;\n            mergedList.next = merge(head1.next, head2);\n        } else { //head1 is large, so pass h\n            //point to smaller element\n            mergedList = head2;\n            //head2 is already considered\n            //now process next node of head2\n            mergedList.next = merge(head1, head2.next);\n        }\n        return mergedList;\n    }\n\n    static int countNodes (ListNode head) {\n\n        int count = 1;\n        ListNode current = head;\n\n        while (current.next != null){\n\n            current = current.next;\n            count++;\n\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n        //  Example 1:\n        //  Output: [1,1,2,3,4,4]\n        //  Input: list1 = [1,2,4], list2 = [1,3,4]\n\n//        int[] ex1data1 = {1,2,4};\n        int[] ex1data1 = {2, 4, 5};\n        ListNode head1ex1 = new ListNode(ex1data1[0]);\n        ListNode current1Ex1 = head1ex1;\n\n        for (int i = 1; i < ex1data1.length; i++) {\n            ListNode node = new ListNode(ex1data1[i]);\n            current1Ex1.next = node;\n            current1Ex1 = node;\n        }\n\n        System.out.println("Ex1 (Head 1) - # of Nodes: " + countNodes(head1ex1));\n\n//        int[] ex1data = {1,3,4};\n        int[] ex1data2 = {3,4,6,7};\n        ListNode head2ex1 = new ListNode(ex1data2[0]);\n        ListNode current2Ex1 = head2ex1;\n\n        for (int i = 1; i < ex1data2.length; i++) {\n            ListNode node = new ListNode(ex1data2[i]);\n            current2Ex1.next = node;\n            current2Ex1 = node;\n        }\n\n        System.out.println("Ex1 (Head 2) - # of Nodes: " + countNodes(head2ex1));\n\n        ListNode mergedListEx1 = merge(head1ex1, head2ex1);\n\n        System.out.println("Ex1 (merged list) - # of Nodes: " + countNodes(mergedListEx1));\n        System.out.println("Ex1 (merged list) - Head: " + mergedListEx1.data);\n        System.out.println();\n\n        int[] ex2data1 = {1, 3, 5, 9};\n        ListNode head1ex2 = new ListNode(ex2data1[0]);\n        ListNode current1Ex2 = head1ex2;\n\n        for (int i = 1; i < ex2data1.length; i++) {\n            ListNode node = new ListNode(ex2data1[i]);\n            current1Ex2.next = node;\n            current1Ex2 = node;\n        }\n\n        System.out.println("Ex2 (Head 1) - # of Nodes: " + countNodes(head1ex2));\n\n        int[] ex2data2 = {2, 4, 5, 6, 10};\n        ListNode head2ex2 = new ListNode(ex2data2[0]);\n        ListNode current2Ex2 = head2ex2;\n\n        for (int i = 1; i < ex2data2.length; i++) {\n            ListNode node = new ListNode(ex2data2[i]);\n            current2Ex2.next = node;\n            current2Ex2 = node;\n        }\n\n        System.out.println("Ex2 (Head 2) - # of Nodes: " + countNodes(head2ex2));\n\n        ListNode mergedListEx2 = merge(head1ex2, head2ex2);\n\n        System.out.println("Ex2 (merged list) - # of Nodes: " + countNodes(mergedListEx2));\n        System.out.println("Ex2 (merged list) - Head: " + mergedListEx2.data);\n\n        //  Example 2:\n        //  Output: []\n        //  Input: list1 = [], list2 = []\n\n        //  Example 3:\n        //  Input: list1 = [], list2 = [0]\n        //  Output: [0]\n\n    }\n}\n'))))),(0,i.kt)("details",null,(0,i.kt)("summary",null," Middle of the Linked List "),(0,i.kt)("h3",{id:"-see-leetcode-problem-876"},(0,i.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/middle-of-the-linked-list/"},"\u2197 See LeetCode Problem #876")),(0,i.kt)(d.Z,{mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"class ListNode {\n    int data;\n    ListNode next;\n\n    ListNode (int data) {\n        this.data = data;\n    }\n}\n\npublic class Solution {\n    /**\n     * Definition for singly-linked list.\n     * public class ListNode {\n     *     int val;\n     *     ListNode next;\n     *     ListNode() {}\n     *     ListNode(int val) { this.val = val; }\n     *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n     * }\n     */\n\n    static ListNode head;\n    static ListNode tail;\n\n//    static ListNode findMiddleNode(ListNode head) {\n    static int findMiddleNode(ListNode head) {\n        ListNode fast = head;\n        ListNode slow = head;\n\n        while (fast != null && fast.next != null) {\n            fast = fast.next.next;\n            slow = slow.next;\n        }\n//        return slow;\n        return slow.data;\n    }\n\n    static int countNodes (ListNode head) {\n\n        int count = 1;\n        ListNode current = head;\n\n            while (current.next != null){\n\n                current = current.next;\n                count++;\n\n            }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n        //  Input: head = [1,2,3,4,5]\n        //  Output: [3,4,5]\n\n        int[] dataArray = {1, 2, 3, 4, 5};\n\n        ListNode head = new ListNode(dataArray[0]);\n        ListNode current = head;\n\n        for (int i = 1; i < dataArray.length; i++) {\n\n            ListNode node = new ListNode(dataArray[i]);\n\n            current.next = node;\n            current = node;\n        }\n\n        System.out.println(countNodes(head));\n        System.out.println(findMiddleNode(head));\n    }\n}\n"))))),(0,i.kt)("details",null,(0,i.kt)("summary",null," Palindrome Linked List "),(0,i.kt)("h3",{id:"-see-leetcode-problem-234"},(0,i.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/palindrome-linked-list/"},"\u2197 See LeetCode Problem #234")),(0,i.kt)(d.Z,{mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},'public class Solution {\n    public static void main(String[] args) {\n        System.out.println("Hello, world!");\n    }\n}\n'))))),(0,i.kt)("details",null,(0,i.kt)("summary",null," Remove Nth Node from End of List "),(0,i.kt)("h3",{id:"-see-leetcode-problem-19"},(0,i.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/remove-nth-node-from-end-of-list/"},"\u2197 See LeetCode Problem #19")),(0,i.kt)(d.Z,{mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"class ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int val) {\n        this.val = val;\n        this.next = null;\n    }\n}\n\npublic class Solution {\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\n\n//    static ListNode removeNthFromEnd(ListNode head, int n) {\n    static int removeNthFromEnd(ListNode head, int n) {\n\n        ListNode dummy = new ListNode(0);\n        dummy.next = head;\n\n        ListNode first = dummy;\n        ListNode second = dummy;\n\n        for (int i = 1; i <= n + 1; i++) {\n            first = first.next;\n        }\n\n        while (first != null) {\n            first = first.next;\n            second = second.next;\n        }\n\n        second.next = second.next.next;\n//        return dummy.next;\n        return dummy.next.val;\n    }\n\n    static int countNodes (ListNode head) {\n\n        int count = 1;\n        ListNode current = head;\n\n        while (current.next != null){\n\n            current = current.next;\n            count++;\n\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n\n        //Input: head = [1,2,3,4,5], n = 2\n        //Output: [1,2,3,5]\n\n        int[] valArray = {1, 2, 3, 4, 5};\n        int n = 2;\n\n        ListNode head = new ListNode(valArray[0]);\n        ListNode current = head;\n\n        for (int i = 1; i < valArray.length; i++) {\n            ListNode node = new ListNode(valArray[i]);\n            current.next = node;\n            current = node;\n        }\n\n        System.out.println(countNodes(head));\n        System.out.println(removeNthFromEnd(head, n));\n    }\n}\n"))))),(0,i.kt)("details",null,(0,i.kt)("summary",null," Reorder List "),(0,i.kt)("h3",{id:"-see-leetcode-problem-143"},(0,i.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/reorder-list/"},"\u2197 See LeetCode Problem #143")),(0,i.kt)(d.Z,{mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"class ListNode {\n    int data;\n    ListNode next;\n\n    ListNode(int data) {\n        this.data = data;\n    }\n}\n\npublic class Solution {\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\n//class Solution {\n    static void reorderList(ListNode head) {\n\n        if (head == null) {\n            return;\n        }\n\n        //  find the middle node\n        //  middle node is =slow=\n        ListNode slow = head;\n        ListNode fast = head;\n\n        while (fast != null && fast.next != null) {\n            slow = slow.next;\n            fast = fast.next.next;\n        }\n\n        //  reverse the second part of the list node in-place\n        //  head of the reversed linked-list is =prev=\n        ListNode prev = null;\n        ListNode current = slow;\n\n        while (current != null) {\n            ListNode next = current.next;\n            current.next = prev;\n            prev = current;\n            current = next;\n        }\n\n        //  merge two sorted lists\n        ListNode first = head;\n        ListNode second = prev;\n\n        while (second.next != null) {\n            ListNode next = first.next;\n            first.next = second;\n            first = next;\n\n            next = second.next;\n            second.next = first;\n            second = next;\n        }\n\n        //  Output the head\n        System.out.println(head.data);\n    }\n\n    public static void main(String[] args) {\n        // Example 1:\n        //Input: head = [1,2,3,4]\n        //  O/P: [1,4,2,3]\n\n        // Example 2:\n        //Input: head = [1,2,3,4,5]\n        //  O/P: [1,5,2,4,3]\n\n        int[] dataArray1 = {1, 2, 3, 4};\n\n        ListNode head1 = new ListNode(dataArray1[0]);\n        ListNode current1 = head1;\n\n        for (int i = 1; i < dataArray1.length; i++) {\n\n            ListNode node = new ListNode(dataArray1[i]);\n\n            current1.next = node;\n            current1 = node;\n        }\n\n        int[] dataArray2 = {1, 2, 3, 4, 5};\n\n        ListNode head2 = new ListNode(dataArray2[0]);\n        ListNode current2 = head2;\n\n        for (int i = 1; i < dataArray2.length; i++) {\n\n            ListNode node = new ListNode(dataArray2[i]);\n\n            current2.next = node;\n            current2 = node;\n        }\n\n        reorderList(head1);\n        reorderList(head2);\n    }\n}\n"))))),(0,i.kt)("details",null,(0,i.kt)("summary",null," Palindrome Linked List "),(0,i.kt)("h3",{id:"-see-leetcode-problem-234-1"},(0,i.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/palindrome-linked-list/"},"\u2197 See LeetCode Problem #234")),(0,i.kt)(d.Z,{mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},'class ListNode {\n    int data;\n    ListNode next;\n\n    ListNode (int data) {\n        this.data = data;\n    }\n}\n\npublic class Solution {\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\n//class Solution {\n\n    static boolean isPalindrome(ListNode head) {\n\n        if (head == null) {\n            return true;\n        }\n\n        ListNode fast = head;\n        ListNode slow = head;\n\n        while (fast.next != null && fast.next.next != null) {\n            slow = slow.next;\n            fast = fast.next.next;\n        }\n\n        ListNode firstHalfHead = head;\n        ListNode secondHalfHead = reverseLinkedList(slow.next);\n\n        while (firstHalfHead != null && secondHalfHead != null){\n//            if (firstHalfHead.val != secondHalfHead.val) {\n            if (firstHalfHead.data != secondHalfHead.data) {\n                return false;\n            }\n\n            firstHalfHead = firstHalfHead.next;\n            secondHalfHead = secondHalfHead.next;\n\n        }\n\n        return true;\n\n    }\n\n    static private ListNode reverseLinkedList(ListNode head) {\n\n        ListNode current = head;\n        ListNode prev = null;\n\n        while (current != null) {\n            ListNode next = current.next;\n            current.next = prev;\n            prev = current;\n            current = next;\n        }\n\n        return prev;\n    }\n\n    public static void main(String[] args) {\n\n        // Example 1:\n        int[] head1Array = {1,2,2,1};\n        //  O/P: true\n\n        // Example 2:\n        int[] head2Array = {1,2};\n        //  O/P: false\n\n        ListNode head1 = new ListNode(head1Array[0]);\n        ListNode current1 = head1;\n\n        for (int i = 1; i < head1Array.length; i++) {\n\n            ListNode node = new ListNode(head1Array[i]);\n\n            current1.next = node;\n            current1 = node;\n        }\n\n        ListNode head2 = new ListNode(head1Array[0]);\n        ListNode current2 = head2;\n\n        for (int i = 1; i < head2Array.length; i++) {\n\n            ListNode node = new ListNode(head2Array[i]);\n\n            current2.next = node;\n            current2 = node;\n        }\n\n        System.out.println("Example 1: " + isPalindrome(head1));\n        System.out.println("Example 1: " + isPalindrome(head2));\n    }\n\n}\n'))))),(0,i.kt)("details",null,(0,i.kt)("summary",null," Reverse Linked List "),(0,i.kt)("h3",{id:"-see-leetcode-problem-206"},(0,i.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/reverse-linked-list/"},"\u2197 See LeetCode Problem #206")),(0,i.kt)(d.Z,{mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\n\nclass ListNode {\n    int data;\n    ListNode next;\n\n    ListNode(int data) {\n        this.data = data;\n        this.next = null;\n    }\n}\n\n//class LinkedList {\n//\n//\n//\n//}\n\nclass Solution {\n\n//    static ListNode reverseList(ListNode head) {\n    static int reverseList(ListNode head) {\n\n        ListNode prev = null;\n\n        while (head != null) {\n            ListNode next = head.next;\n            head.next = prev;\n            prev = head;\n            head = next;\n        }\n\n//        return prev;\n        return prev.data;\n    }\n\n    static int countNodes (ListNode head) {\n\n        int count = 1;\n        ListNode current = head;\n\n        while (current.next != null){\n\n            current = current.next;\n            count++;\n\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n\n        int[] headArray = {1,2,3,4,5};\n\n        ListNode head = new ListNode(headArray[0]);\n        ListNode current = head;\n\n        for (int i = 1; i < headArray.length; i++) {\n\n            ListNode node = new ListNode(headArray[i]);\n            current.next = node;\n            current = node;\n\n        }\n\n//        ListNode nodeA = new ListNode(1);\n//        ListNode nodeB = new ListNode(2);\n//        ListNode nodeC = new ListNode(3);\n//        ListNode nodeD = new ListNode(4);\n//        ListNode nodeE = new ListNode(5);\n//\n//        nodeA.next = nodeB;\n//        nodeB.next = nodeC;\n//        nodeC.next = nodeD;\n//        nodeD.next = nodeE;\n\n        System.out.println(countNodes(head));\n        System.out.println(reverseList(head));\n\n//        System.out.println();\n//        System.out.println(countNodes(nodeA));\n//        System.out.println(reverseList(nodeA));\n\n    }\n}\n"))))))}p.isMDXComponent=!0}}]);