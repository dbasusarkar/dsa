"use strict";(self.webpackChunkdsa=self.webpackChunkdsa||[]).push([[5907],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>p});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=n.createContext({}),u=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=u(e.components);return n.createElement(i.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=u(a),p=r,h=d["".concat(i,".").concat(p)]||d[p]||m[p]||s;return a?n.createElement(h,l(l({ref:t},c),{},{components:a})):n.createElement(h,l({ref:t},c))}));function p(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,l=new Array(s);l[0]=d;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var u=2;u<s;u++)l[u]=a[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},5162:(e,t,a)=>{a.d(t,{Z:()=>l});var n=a(7294),r=a(6010);const s="tabItem_Ymn6";function l(e){let{children:t,hidden:a,className:l}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(s,l),hidden:a},t)}},5488:(e,t,a)=>{a.d(t,{Z:()=>p});var n=a(7462),r=a(7294),s=a(6010),l=a(2389),o=a(7392),i=a(7094),u=a(2466);const c="tabList__CuJ",m="tabItem_LNqP";function d(e){var t;const{lazy:a,block:l,defaultValue:d,values:p,groupId:h,className:b}=e,f=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),v=p??f.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),g=(0,o.l)(v,((e,t)=>e.value===t.value));if(g.length>0)throw new Error(`Docusaurus error: Duplicate values "${g.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const y=null===d?d:d??(null==(t=f.find((e=>e.props.default)))?void 0:t.props.value)??f[0].props.value;if(null!==y&&!v.some((e=>e.value===y)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${y}" but none of its children has the corresponding value. Available values are: ${v.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:k,setTabGroupChoices:w}=(0,i.U)(),[T,N]=(0,r.useState)(y),O=[],{blockElementScrollPositionUntilNextRender:S}=(0,u.o5)();if(null!=h){const e=k[h];null!=e&&e!==T&&v.some((t=>t.value===e))&&N(e)}const E=e=>{const t=e.currentTarget,a=O.indexOf(t),n=v[a].value;n!==T&&(S(t),N(n),null!=h&&w(h,String(n)))},C=e=>{var t;let a=null;switch(e.key){case"ArrowRight":{const t=O.indexOf(e.currentTarget)+1;a=O[t]??O[0];break}case"ArrowLeft":{const t=O.indexOf(e.currentTarget)-1;a=O[t]??O[O.length-1];break}}null==(t=a)||t.focus()};return r.createElement("div",{className:(0,s.Z)("tabs-container",c)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":l},b)},v.map((e=>{let{value:t,label:a,attributes:l}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:e=>O.push(e),onKeyDown:C,onFocus:E,onClick:E},l,{className:(0,s.Z)("tabs__item",m,null==l?void 0:l.className,{"tabs__item--active":T===t})}),a??t)}))),a?(0,r.cloneElement)(f.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},f.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==T})))))}function p(e){const t=(0,l.Z)();return r.createElement(d,(0,n.Z)({key:String(t)},e))}},2491:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>u,toc:()=>m});var n=a(7462),r=(a(7294),a(3905)),s=a(5488),l=a(5162);const o={sidebar_position:4,id:"d-hash-tables",title:"Hash Tables",tags:["hash-tables","ransom-note"]},i="Hash Tables",u={unversionedId:"data-structures/d-hash-tables",id:"data-structures/d-hash-tables",title:"Hash Tables",description:"- Understanding hash tables",source:"@site/docs/data-structures/d-hash-tables.md",sourceDirName:"data-structures",slug:"/data-structures/d-hash-tables",permalink:"/dsa/docs/data-structures/d-hash-tables",draft:!1,tags:[{label:"hash-tables",permalink:"/dsa/docs/tags/hash-tables"},{label:"ransom-note",permalink:"/dsa/docs/tags/ransom-note"}],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,id:"d-hash-tables",title:"Hash Tables",tags:["hash-tables","ransom-note"]},sidebar:"docs",previous:{title:"Linked Lists",permalink:"/dsa/docs/data-structures/c-linked-lists"},next:{title:"Hash Sets",permalink:"/dsa/docs/data-structures/e-hash-sets"}},c={},m=[{value:"Problems related to hash tables",id:"problems-related-to-hash-tables",level:2},{value:"\u2197 See LeetCode Problem #383",id:"-see-leetcode-problem-383",level:3},{value:"\u2197 Two Sum",id:"-two-sum",level:3},{value:"\u2197 Two Sum IV - Input is a BST",id:"-two-sum-iv---input-is-a-bst",level:3}],d={toc:m};function p(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"hash-tables"},"Hash Tables"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Understanding hash tables "),(0,r.kt)("li",{parentName:"ul"},"Solved problems are presented in alphabetical order")),(0,r.kt)("h2",{id:"problems-related-to-hash-tables"},"Problems related to hash tables"),(0,r.kt)("details",null,(0,r.kt)("summary",null," Ransom Note "),(0,r.kt)("h3",{id:"-see-leetcode-problem-383"},(0,r.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/ransom-note/"},"\u2197 See LeetCode Problem #383")),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},'import java.util.Map;\nimport java.util.HashMap;\n\npublic class Solution {\n    static boolean canConstruct(String ransomNote, String magazine) {\n        Map<Character, Integer> characterMap = new HashMap<>();\n\n        for (int i = 0; i < magazine.length(); i++) {\n            int characterCount = characterMap.getOrDefault(\n                    magazine.charAt(i), 0);\n            characterMap.put(magazine.charAt(i), characterCount + 1);\n        }\n\n        for (int i = 0; i < ransomNote.length(); i++) {\n\n            int characterCount = characterMap.getOrDefault(\n                    ransomNote.charAt(i), 0);\n\n            if (characterCount == 0) {\n                return false;\n            }\n\n            characterMap.put(ransomNote.charAt(i), characterCount - 1);\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        // Example 1:\n        String ransomNote1 = "a";\n        String magazine1 = "b";\n        //  O/P: false\n\n        // Example 2:\n        String ransomNote2 = "aa";\n        String magazine2 = "ab";\n        //  O/P: false\n\n        // Example 3:\n        String ransomNote3 = "aa";\n        String magazine3 = "aab";\n        //  O/P: true\n\n        System.out.println(canConstruct(ransomNote1, magazine1));\n        System.out.println(canConstruct(ransomNote2, magazine2));\n        System.out.println(canConstruct(ransomNote3, magazine3));\n    }\n}\n'))))),(0,r.kt)("details",null,(0,r.kt)("summary",null," Two Sum "),(0,r.kt)("h3",{id:"-two-sum"},(0,r.kt)("a",{parentName:"h3",href:"/dsa/docs/data-structures/a-arrays"},"\u2197 Two Sum"))),(0,r.kt)("details",null,(0,r.kt)("summary",null," Two Sum IV - Input is a BST "),(0,r.kt)("h3",{id:"-two-sum-iv---input-is-a-bst"},(0,r.kt)("a",{parentName:"h3",href:"/dsa/docs/data-structures/i-binary-search-trees"},"\u2197 Two Sum IV - Input is a BST"))))}p.isMDXComponent=!0}}]);