"use strict";(self.webpackChunkdsa=self.webpackChunkdsa||[]).push([[7817],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>p});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var i=r.createContext({}),c=function(e){var t=r.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},u=function(e){var t=c(e.components);return r.createElement(i.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,i=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(a),p=n,b=d["".concat(i,".").concat(p)]||d[p]||m[p]||l;return a?r.createElement(b,s(s({ref:t},u),{},{components:a})):r.createElement(b,s({ref:t},u))}));function p(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,s=new Array(l);s[0]=d;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:n,s[1]=o;for(var c=2;c<l;c++)s[c]=a[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},5162:(e,t,a)=>{a.d(t,{Z:()=>s});var r=a(7294),n=a(6010);const l="tabItem_Ymn6";function s(e){let{children:t,hidden:a,className:s}=e;return r.createElement("div",{role:"tabpanel",className:(0,n.Z)(l,s),hidden:a},t)}},5488:(e,t,a)=>{a.d(t,{Z:()=>p});var r=a(7462),n=a(7294),l=a(6010),s=a(2389),o=a(7392),i=a(7094),c=a(2466);const u="tabList__CuJ",m="tabItem_LNqP";function d(e){var t;const{lazy:a,block:s,defaultValue:d,values:p,groupId:b,className:h}=e,y=n.Children.map(e.children,(e=>{if((0,n.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),v=p??y.map((e=>{let{props:{value:t,label:a,attributes:r}}=e;return{value:t,label:a,attributes:r}})),f=(0,o.l)(v,((e,t)=>e.value===t.value));if(f.length>0)throw new Error(`Docusaurus error: Duplicate values "${f.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const k=null===d?d:d??(null==(t=y.find((e=>e.props.default)))?void 0:t.props.value)??y[0].props.value;if(null!==k&&!v.some((e=>e.value===k)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${k}" but none of its children has the corresponding value. Available values are: ${v.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:g,setTabGroupChoices:w}=(0,i.U)(),[T,S]=(0,n.useState)(k),N=[],{blockElementScrollPositionUntilNextRender:O}=(0,c.o5)();if(null!=b){const e=g[b];null!=e&&e!==T&&v.some((t=>t.value===e))&&S(e)}const E=e=>{const t=e.currentTarget,a=N.indexOf(t),r=v[a].value;r!==T&&(O(t),S(r),null!=b&&w(b,String(r)))},j=e=>{var t;let a=null;switch(e.key){case"ArrowRight":{const t=N.indexOf(e.currentTarget)+1;a=N[t]??N[0];break}case"ArrowLeft":{const t=N.indexOf(e.currentTarget)-1;a=N[t]??N[N.length-1];break}}null==(t=a)||t.focus()};return n.createElement("div",{className:(0,l.Z)("tabs-container",u)},n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":s},h)},v.map((e=>{let{value:t,label:a,attributes:s}=e;return n.createElement("li",(0,r.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:e=>N.push(e),onKeyDown:j,onFocus:E,onClick:E},s,{className:(0,l.Z)("tabs__item",m,null==s?void 0:s.className,{"tabs__item--active":T===t})}),a??t)}))),a?(0,n.cloneElement)(y.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):n.createElement("div",{className:"margin-top--md"},y.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==T})))))}function p(e){const t=(0,s.Z)();return n.createElement(d,(0,r.Z)({key:String(t)},e))}},8215:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>m});var r=a(7462),n=(a(7294),a(3905)),l=a(5488),s=a(5162);const o={sidebar_position:9,id:"i-binary-search-trees",title:"Binary Search Trees",tags:["binary-search-trees","kth-smallest-element-in-a-bst","lowest-common-ancestor-of-a-bst","validate-binary-search-tree"]},i="Binary Search Trees",c={unversionedId:"data-structures/i-binary-search-trees",id:"data-structures/i-binary-search-trees",title:"Binary Search Trees",description:"- Understanding binary search trees",source:"@site/docs/data-structures/i-binary-search-trees.md",sourceDirName:"data-structures",slug:"/data-structures/i-binary-search-trees",permalink:"/dsa/docs/data-structures/i-binary-search-trees",draft:!1,tags:[{label:"binary-search-trees",permalink:"/dsa/docs/tags/binary-search-trees"},{label:"kth-smallest-element-in-a-bst",permalink:"/dsa/docs/tags/kth-smallest-element-in-a-bst"},{label:"lowest-common-ancestor-of-a-bst",permalink:"/dsa/docs/tags/lowest-common-ancestor-of-a-bst"},{label:"validate-binary-search-tree",permalink:"/dsa/docs/tags/validate-binary-search-tree"}],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9,id:"i-binary-search-trees",title:"Binary Search Trees",tags:["binary-search-trees","kth-smallest-element-in-a-bst","lowest-common-ancestor-of-a-bst","validate-binary-search-tree"]},sidebar:"docs",previous:{title:"Heaps",permalink:"/dsa/docs/data-structures/h-heaps"},next:{title:"Binary Trees",permalink:"/dsa/docs/data-structures/j-binary-trees"}},u={},m=[{value:"Problems related to binary search trees",id:"problems-related-to-binary-search-trees",level:2},{value:"\u2197 See LeetCode Problem #230",id:"-see-leetcode-problem-230",level:3},{value:"\u2197 See LeetCode Problem #235",id:"-see-leetcode-problem-235",level:3},{value:"\u2197 See LeetCode Problem #98",id:"-see-leetcode-problem-98",level:3}],d={toc:m};function p(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"binary-search-trees"},"Binary Search Trees"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Understanding binary search trees "),(0,n.kt)("li",{parentName:"ul"},"Solved problems are presented in alphabetical order")),(0,n.kt)("h2",{id:"problems-related-to-binary-search-trees"},"Problems related to binary search trees"),(0,n.kt)("details",null,(0,n.kt)("summary",null," Kth Smallest Element in a BST (Expand/Collapse) "),(0,n.kt)("h3",{id:"-see-leetcode-problem-230"},(0,n.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/kth-smallest-element-in-a-bst/"},"\u2197 See LeetCode Problem #230")),(0,n.kt)(l.Z,{mdxType:"Tabs"},(0,n.kt)(s.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},'public class Solution {\n    public static void main(String[] args) {\n        System.out.println("Hello, world!");\n    }\n}\n'))))),(0,n.kt)("details",null,(0,n.kt)("summary",null," Lowest Common Ancestor of a Binary Search Tree (Expand/Collapse) "),(0,n.kt)("h3",{id:"-see-leetcode-problem-235"},(0,n.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/"},"\u2197 See LeetCode Problem #235")),(0,n.kt)(l.Z,{mdxType:"Tabs"},(0,n.kt)(s.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},'public class Solution {\n    public static void main(String[] args) {\n        System.out.println("Hello, world!");\n    }\n}\n'))))),(0,n.kt)("details",null,(0,n.kt)("summary",null," Validate Binary Search Tree (Expand/Collapse) "),(0,n.kt)("h3",{id:"-see-leetcode-problem-98"},(0,n.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/validate-binary-search-tree/"},"\u2197 See LeetCode Problem #98")),(0,n.kt)(l.Z,{mdxType:"Tabs"},(0,n.kt)(s.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},'public class Solution {\n    public static void main(String[] args) {\n        System.out.println("Hello, world!");\n    }\n}\n'))))))}p.isMDXComponent=!0}}]);