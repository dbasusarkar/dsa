"use strict";(self.webpackChunkdsa=self.webpackChunkdsa||[]).push([[1293],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>p});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=i.createContext({}),u=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=u(e.components);return i.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},c=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=u(t),p=r,w=c["".concat(s,".").concat(p)]||c[p]||m[p]||a;return t?i.createElement(w,o(o({ref:n},d),{},{components:t})):i.createElement(w,o({ref:n},d))}));function p(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=c;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var u=2;u<a;u++)o[u]=t[u];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}c.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>o});var i=t(7294),r=t(6010);const a="tabItem_Ymn6";function o(e){let{children:n,hidden:t,className:o}=e;return i.createElement("div",{role:"tabpanel",className:(0,r.Z)(a,o),hidden:t},n)}},5488:(e,n,t)=>{t.d(n,{Z:()=>p});var i=t(7462),r=t(7294),a=t(6010),o=t(2389),l=t(7392),s=t(7094),u=t(2466);const d="tabList__CuJ",m="tabItem_LNqP";function c(e){var n;const{lazy:t,block:o,defaultValue:c,values:p,groupId:w,className:g}=e,b=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=p??b.map((e=>{let{props:{value:n,label:t,attributes:i}}=e;return{value:n,label:t,attributes:i}})),h=(0,l.l)(f,((e,n)=>e.value===n.value));if(h.length>0)throw new Error(`Docusaurus error: Duplicate values "${h.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const v=null===c?c:c??(null==(n=b.find((e=>e.props.default)))?void 0:n.props.value)??b[0].props.value;if(null!==v&&!f.some((e=>e.value===v)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${v}" but none of its children has the corresponding value. Available values are: ${f.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:k,setTabGroupChoices:y}=(0,s.U)(),[x,S]=(0,r.useState)(v),O=[],{blockElementScrollPositionUntilNextRender:E}=(0,u.o5)();if(null!=w){const e=k[w];null!=e&&e!==x&&f.some((n=>n.value===e))&&S(e)}const T=e=>{const n=e.currentTarget,t=O.indexOf(n),i=f[t].value;i!==x&&(E(n),S(i),null!=w&&y(w,String(i)))},N=e=>{var n;let t=null;switch(e.key){case"ArrowRight":{const n=O.indexOf(e.currentTarget)+1;t=O[n]??O[0];break}case"ArrowLeft":{const n=O.indexOf(e.currentTarget)-1;t=O[n]??O[O.length-1];break}}null==(n=t)||n.focus()};return r.createElement("div",{className:(0,a.Z)("tabs-container",d)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":o},g)},f.map((e=>{let{value:n,label:t,attributes:o}=e;return r.createElement("li",(0,i.Z)({role:"tab",tabIndex:x===n?0:-1,"aria-selected":x===n,key:n,ref:e=>O.push(e),onKeyDown:N,onFocus:T,onClick:T},o,{className:(0,a.Z)("tabs__item",m,null==o?void 0:o.className,{"tabs__item--active":x===n})}),t??n)}))),t?(0,r.cloneElement)(b.filter((e=>e.props.value===x))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},b.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==x})))))}function p(e){const n=(0,o.Z)();return r.createElement(c,(0,i.Z)({key:String(n)},e))}},2786:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>p,frontMatter:()=>l,metadata:()=>u,toc:()=>m});var i=t(7462),r=(t(7294),t(3905)),a=t(5488),o=t(5162);const l={sidebar_position:1,id:"a-sliding-window",title:"Sliding Window",tags:["sliding-window","sliding-window-maximum"]},s="Sliding Window",u={unversionedId:"patterns/a-sliding-window",id:"patterns/a-sliding-window",title:"Sliding Window",description:"- Understanding sliding window",source:"@site/docs/patterns/a-sliding-window.md",sourceDirName:"patterns",slug:"/patterns/a-sliding-window",permalink:"/dsa/docs/patterns/a-sliding-window",draft:!1,tags:[{label:"sliding-window",permalink:"/dsa/docs/tags/sliding-window"},{label:"sliding-window-maximum",permalink:"/dsa/docs/tags/sliding-window-maximum"}],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,id:"a-sliding-window",title:"Sliding Window",tags:["sliding-window","sliding-window-maximum"]},sidebar:"docs",previous:{title:"Patterns",permalink:"/dsa/docs/category/patterns"},next:{title:"Two Pointers",permalink:"/dsa/docs/patterns/b-two-pointers"}},d={},m=[{value:"Problems related to sliding window",id:"problems-related-to-sliding-window",level:2},{value:"\u2197 Longest Substring Without Repeating Characters",id:"-longest-substring-without-repeating-characters",level:3},{value:"\u2197 Minimum Window Substring",id:"-minimum-window-substring",level:3},{value:"\u2197 See LeetCode Problem #239",id:"-see-leetcode-problem-239",level:3}],c={toc:m};function p(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,i.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"sliding-window"},"Sliding Window"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Understanding sliding window "),(0,r.kt)("li",{parentName:"ul"},"Solved problems are presented in alphabetical order")),(0,r.kt)("h2",{id:"problems-related-to-sliding-window"},"Problems related to sliding window"),(0,r.kt)("details",null,(0,r.kt)("summary",null," Longest Substring Without Repeating Characters (Expand/Collapse) "),(0,r.kt)("h3",{id:"-longest-substring-without-repeating-characters"},(0,r.kt)("a",{parentName:"h3",href:"/dsa/docs/data-structures/b-strings"},"\u2197 Longest Substring Without Repeating Characters"))),(0,r.kt)("details",null,(0,r.kt)("summary",null," Minimum Window Substring (Expand/Collapse) "),(0,r.kt)("h3",{id:"-minimum-window-substring"},(0,r.kt)("a",{parentName:"h3",href:"/dsa/docs/data-structures/b-strings"},"\u2197 Minimum Window Substring"))),(0,r.kt)("details",null,(0,r.kt)("summary",null," Sliding Window Maximum (Expand/Collapse) "),(0,r.kt)("h3",{id:"-see-leetcode-problem-239"},(0,r.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/sliding-window-maximum/"},"\u2197 See LeetCode Problem #239")),(0,r.kt)(a.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"import java.util.*;\n\n class MethodsToSolution {\n    Deque<Integer> windowQueue = new ArrayDeque<>();\n    //  Make nums available globally\n    int[] nums;\n\n    public void updatedWindowQueue(int index, int k) {\n\n        //  Only keep the indexes of current sliding window\n        if (!windowQueue.isEmpty() &&\n                windowQueue.peekFirst() == index - k) {\n            windowQueue.pollFirst();\n        }\n\n        //  Only keep the max value in the current sliding window\n        while (!windowQueue.isEmpty() &&\n                nums[index] > nums[windowQueue.peekLast()]) {\n            windowQueue.pollLast();\n        }\n    }\n\n    public int[] maxSlidingWindow(int[] nums, int k) {\n\n        //  If either k or nums is zero\n        //      return 0\n        if (nums.length * k == 0) {\n            return new int[0];\n        }\n\n        if (k == 1) {\n            //  Returns the original list since\n            //      the ONLY element is the max or min\n            //      in the current window\n            return nums;\n        }\n\n        //  Set nums to global nums\n        this.nums = nums;\n        int maximumIndex = 0;\n\n        //  Initialize windowQueue\n        for (int i = 0; i < k; i++) {\n            updatedWindowQueue(i, k);\n            windowQueue.offerLast(i);\n\n            if (nums[i] > nums[maximumIndex]) {\n                maximumIndex = i;\n            }\n        }\n\n        //  Initialize result\n        int[] result = new int[nums.length - k + 1];\n        result[0] = nums[maximumIndex];\n\n        //  Final Step\n        for (int i = k; i < nums.length; i++) {\n            updatedWindowQueue(i, k);\n            windowQueue.offerLast(i);\n            result[i - k + 1] = nums[windowQueue.peekFirst()];\n        }\n\n        return result;\n    }\n\n}\n\nclass Solution {\n    public static void main(String[] args) {\n\n        MethodsToSolution methodsToSolution = new MethodsToSolution();\n\n        // Example 1:\n        int[] nums1 = {1,3,-1,-3,5,3,6,7};\n        int k1 = 3;\n        //  O/P: [3,3,5,5,6,7]\n\n        // Example 2:\n        int[] nums2 = {1};\n        int k2 = 1;\n        //  O/P: [1]\n\n        System.out.println(Arrays.toString(\n                methodsToSolution.maxSlidingWindow(nums1, k1)));\n        System.out.println(Arrays.toString(\n                methodsToSolution.maxSlidingWindow(nums2, k2)));\n\n    }\n}\n"))))))}p.isMDXComponent=!0}}]);