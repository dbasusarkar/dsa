"use strict";(self.webpackChunkdsa=self.webpackChunkdsa||[]).push([[5395],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>c});var i=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=i.createContext({}),u=function(e){var n=i.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},m=function(e){var n=u(e.components);return i.createElement(o.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},b=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),b=u(t),c=a,d=b["".concat(o,".").concat(c)]||b[c]||p[c]||r;return t?i.createElement(d,l(l({ref:n},m),{},{components:t})):i.createElement(d,l({ref:n},m))}));function c(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,l=new Array(r);l[0]=b;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var u=2;u<r;u++)l[u]=t[u];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}b.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>l});var i=t(7294),a=t(6010);const r="tabItem_Ymn6";function l(e){let{children:n,hidden:t,className:l}=e;return i.createElement("div",{role:"tabpanel",className:(0,a.Z)(r,l),hidden:t},n)}},5488:(e,n,t)=>{t.d(n,{Z:()=>c});var i=t(7462),a=t(7294),r=t(6010),l=t(2389),s=t(7392),o=t(7094),u=t(2466);const m="tabList__CuJ",p="tabItem_LNqP";function b(e){var n;const{lazy:t,block:l,defaultValue:b,values:c,groupId:d,className:g}=e,h=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),v=c??h.map((e=>{let{props:{value:n,label:t,attributes:i}}=e;return{value:n,label:t,attributes:i}})),y=(0,s.l)(v,((e,n)=>e.value===n.value));if(y.length>0)throw new Error(`Docusaurus error: Duplicate values "${y.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const f=null===b?b:b??(null==(n=h.find((e=>e.props.default)))?void 0:n.props.value)??h[0].props.value;if(null!==f&&!v.some((e=>e.value===f)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${f}" but none of its children has the corresponding value. Available values are: ${v.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:k,setTabGroupChoices:S}=(0,o.U)(),[N,w]=(0,a.useState)(f),x=[],{blockElementScrollPositionUntilNextRender:B}=(0,u.o5)();if(null!=d){const e=k[d];null!=e&&e!==N&&v.some((n=>n.value===e))&&w(e)}const O=e=>{const n=e.currentTarget,t=x.indexOf(n),i=v[t].value;i!==N&&(B(n),w(i),null!=d&&S(d,String(i)))},T=e=>{var n;let t=null;switch(e.key){case"ArrowRight":{const n=x.indexOf(e.currentTarget)+1;t=x[n]??x[0];break}case"ArrowLeft":{const n=x.indexOf(e.currentTarget)-1;t=x[n]??x[x.length-1];break}}null==(n=t)||n.focus()};return a.createElement("div",{className:(0,r.Z)("tabs-container",m)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":l},g)},v.map((e=>{let{value:n,label:t,attributes:l}=e;return a.createElement("li",(0,i.Z)({role:"tab",tabIndex:N===n?0:-1,"aria-selected":N===n,key:n,ref:e=>x.push(e),onKeyDown:T,onFocus:O,onClick:O},l,{className:(0,r.Z)("tabs__item",p,null==l?void 0:l.className,{"tabs__item--active":N===n})}),t??n)}))),t?(0,a.cloneElement)(h.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},h.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==N})))))}function c(e){const n=(0,l.Z)();return a.createElement(b,(0,i.Z)({key:String(n)},e))}},7061:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>o,default:()=>c,frontMatter:()=>s,metadata:()=>u,toc:()=>p});var i=t(7462),a=(t(7294),t(3905)),r=t(5488),l=t(5162);const s={sidebar_position:8,id:"h-bit-manipulation",title:"Bit Manipulation",tags:["bit-manipulation","add-binary","counting-bits","missing-number","number-of-1-bits","reverse-bits","single-number"]},o="Bit Manipulation",u={unversionedId:"patterns/h-bit-manipulation",id:"patterns/h-bit-manipulation",title:"Bit Manipulation",description:"- Understanding bit manipulation",source:"@site/docs/patterns/h-bit-manipulation.md",sourceDirName:"patterns",slug:"/patterns/h-bit-manipulation",permalink:"/dsa/docs/patterns/h-bit-manipulation",draft:!1,tags:[{label:"bit-manipulation",permalink:"/dsa/docs/tags/bit-manipulation"},{label:"add-binary",permalink:"/dsa/docs/tags/add-binary"},{label:"counting-bits",permalink:"/dsa/docs/tags/counting-bits"},{label:"missing-number",permalink:"/dsa/docs/tags/missing-number"},{label:"number-of-1-bits",permalink:"/dsa/docs/tags/number-of-1-bits"},{label:"reverse-bits",permalink:"/dsa/docs/tags/reverse-bits"},{label:"single-number",permalink:"/dsa/docs/tags/single-number"}],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8,id:"h-bit-manipulation",title:"Bit Manipulation",tags:["bit-manipulation","add-binary","counting-bits","missing-number","number-of-1-bits","reverse-bits","single-number"]},sidebar:"docs",previous:{title:"Topological Sorting",permalink:"/dsa/docs/patterns/g-topological-sorting"},next:{title:"Dynamic Programming",permalink:"/dsa/docs/patterns/i-dp"}},m={},p=[{value:"Problems related to bit manipulation",id:"problems-related-to-bit-manipulation",level:2},{value:"\u2197 See LeetCode Problem #67",id:"-see-leetcode-problem-67",level:3},{value:"\u2197 See LeetCode Problem #338",id:"-see-leetcode-problem-338",level:3},{value:"\u2197 See LeetCode Problem #268",id:"-see-leetcode-problem-268",level:3},{value:"\u2197 See LeetCode Problem #191",id:"-see-leetcode-problem-191",level:3},{value:"\u2197 See LeetCode Problem #190",id:"-see-leetcode-problem-190",level:3},{value:"\u2197 See LeetCode Problem #136",id:"-see-leetcode-problem-136",level:3}],b={toc:p};function c(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,i.Z)({},b,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"bit-manipulation"},"Bit Manipulation"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Understanding bit manipulation "),(0,a.kt)("li",{parentName:"ul"},"Solved problems are presented in alphabetical order")),(0,a.kt)("h2",{id:"problems-related-to-bit-manipulation"},"Problems related to bit manipulation"),(0,a.kt)("details",null,(0,a.kt)("summary",null," Add Binary "),(0,a.kt)("h3",{id:"-see-leetcode-problem-67"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/add-binary/"},"\u2197 See LeetCode Problem #67")),(0,a.kt)(r.Z,{mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},'import java.math.BigInteger;\n\npublic class Solution {\n    static String addBinary(String a, String b) {\n        //  Approach 1: Might not be acceptable to the interviwer\n//        return Integer.toBinaryString(\n//                Integer.parseInt(a,2) + Integer.parseInt(b, 2));\n\n        //  Approach 2: XOR a and b (to get respone without carry)\n        //      AND a and b and then left shift by 1 (<< 1)\n        //          (to get respone with carry)\n        //      Set a = the respone without carry\n        //      Set b = the respone with carry\n        //      Continue while carry != 0\n\n        BigInteger bigA = new BigInteger(a, 2);\n        BigInteger bigB = new BigInteger(b, 2);\n\n        BigInteger bigZero = new BigInteger("0", 2);\n\n        BigInteger temp;\n        BigInteger carry;\n\n        while (bigB.compareTo(bigZero) != 0) {\n            temp = bigA.xor(bigB);\n            carry = bigA.and(bigB).shiftLeft(1);\n\n            //  Update bigA\n            bigA = temp;\n            //  Update bigB\n            bigB = carry;\n        }\n\n        return bigA.toString(2);\n    }\n\n    public static void main(String[] args) {\n        // Example 1:\n        String a1 = "11";\n        String b1 = "1";\n        //  O/P: "100"\n\n        // Example 2:\n         String a2 = "1010";\n         String b2 = "1011";\n        //  O/P: "10101"\n\n        System.out.println(addBinary(a1, b1));\n        System.out.println(addBinary(a2, b2));\n\n    }\n}\n'))))),(0,a.kt)("details",null,(0,a.kt)("summary",null," Counting Bits "),(0,a.kt)("h3",{id:"-see-leetcode-problem-338"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/counting-bits/"},"\u2197 See LeetCode Problem #338")),(0,a.kt)(r.Z,{mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"import java.util.Arrays;\n\npublic class Solution {\n    static int[] countBits(int n) {\n\n        int[] ans = new int[n + 1];\n\n        for (int i = 1; i <= n; ++i) {\n\n            //  i / 2 is i >> 1 (bit right shift operation)\n            //  i % 2 is i & 1\n            ans[i] = ans[i >> 1] + (i & 1);\n\n        }\n\n        return ans;\n    }\n\n    public static void main(String[] args) {\n\n        // Example 1:\n        int n1 = 2;\n        //  O/P: [0,1,1]\n\n        // Example 2:\n        int n2 = 5;\n        //  O/P: [0,1,1,2,1,2]\n\n        // Example 3:\n        int n3 = 55;\n\n        System.out.println(Arrays.toString(countBits(n1)));\n        System.out.println(Arrays.toString(countBits(n2)));\n        System.out.println(Arrays.toString(countBits(n3)));\n\n    }\n}\n"))))),(0,a.kt)("details",null,(0,a.kt)("summary",null," Missing Number "),(0,a.kt)("h3",{id:"-see-leetcode-problem-268"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/missing-number/"},"\u2197 See LeetCode Problem #268")),(0,a.kt)(r.Z,{mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},'public class Solution {\n    static int missingNumber(int[] nums) {\n\n        //  nums.length will always be in the given array\n        //      but it won\'t appear as an index in the for loop\n        int missing = nums.length;\n\n        for (int i = 0; i < nums.length; i++) {\n            missing ^= nums[i] ^ i;\n        }\n\n        return missing;\n    }\n\n    public static void main(String[] args) {\n\n        // Example 1:\n        int[] nums1 = {3, 0, 1};\n        //  O/P: 2\n\n        // Example 2:\n        int[] nums2 = {0, 1};\n        //  O/P: 2\n\n        // Example 3:\n        int[] nums3 = {9, 6, 4, 2, 3, 5, 7, 0, 1};\n        //  O/P: 8\n\n        // Example 4:\n        int[] nums4 = {2, 0, 3};\n        //  O/P: 2\n        // 3^2^0^0^1^3^2\n\n        System.out.println("Example 1: " + missingNumber(nums1));\n        System.out.println("Example 2: " + missingNumber(nums2));\n        System.out.println("Example 3: " + missingNumber(nums3));\n        System.out.println("Example 4: " + missingNumber(nums4));\n\n    }\n }\n'))))),(0,a.kt)("details",null,(0,a.kt)("summary",null," Number of 1 Bits "),(0,a.kt)("h3",{id:"-see-leetcode-problem-191"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/number-of-1-bits/"},"\u2197 See LeetCode Problem #191")),(0,a.kt)(r.Z,{mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"public class Solution {\n    static int hammingWeight(int n) {\n        int sum = 0;\n\n        while (n != 0) {\n            sum++;\n            n = n & (n - 1);\n//            n &= (n - 1);\n        }\n\n        return sum;\n    }\n\n    public static void main(String[] args) {\n\n        // Example 1:\n        int n1 = 0B00000000000000000000000000001011;\n        //  O/P: 3\n\n        // Example 2:\n        int n2 = 0B00000000000000000000000010000000;\n        //  O/P: 1\n\n        //  Need to signed number issue\n        // Example 3:\n        //Input: n3 = 11111111111111111111111111111101\n        //Output: 31\n\n        System.out.println(hammingWeight(n1));\n        System.out.println(Integer.toBinaryString(hammingWeight(n1)));\n        System.out.println(hammingWeight(n2));\n        System.out.println(Integer.toBinaryString(hammingWeight(n2)));\n    }\n}\n"))))),(0,a.kt)("details",null,(0,a.kt)("summary",null," Reverse Bits "),(0,a.kt)("h3",{id:"-see-leetcode-problem-190"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/reverse-bits/"},"\u2197 See LeetCode Problem #190")),(0,a.kt)(r.Z,{mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"// Doesn't work with negative signed integer\n\npublic class Solution {\n    static int reverseBits(int n) {\n        //   If n is 0 return 0\n        if (n == 0) {\n            return 0;\n        }\n\n        //   Initializing the result\n        int result = 0;\n\n        //   Loop through the given 32 bit (unsigned) integer\n        for (int i = 0; i < 32; i++) {\n            //  Bitwise leftshifting result\n            result <<= 1;\n            //  Adding 1 to result if & between righmost value of n\n            //      and 1 is 1\n            if ((n & 1) == 1) {\n                result++;\n            }\n\n            //   Bitwise righshifting given n since the rightmost digit\n            //       has been processed\n            n >>= 1;\n        }\n\n        return result;\n\n    }\n\n    public static void main(String[] args) {\n\n        // Example 1:\n//        int n1 = 00000010100101000001111010011100;\n        int n1 = 0B00000010100101000001111010011100;\n        //  O/P: 964176192 (00111001011110000010100101000000)\n        //                 (111001011110000010100101000000)\n\n        // Example 2:\n//        int n2 = 11111111111111111111111111111101;\n        //  Wrong since left-most 1 represents negative\n        //  int n2 = 0B11111111111111111111111111111101;\n        //  First, flip 1's and 0's: to get 1's complement\n        //  0B00000000000000000000000000000010;\n        //  Then add 1: to get 2's complement\n        //  0B00000000000000000000000000000011;\n        //  So, we have:\n//        long n2 = 0B00000000000000000000000000000011L;\n        //  O/P: 3221225471 (10111111111111111111111111111111)\n\n        System.out.println(reverseBits(n1));\n        System.out.println(Integer.toBinaryString(reverseBits(n1)));\n//        System.out.println(reverseBits(n2));\n    }\n}\n"))))),(0,a.kt)("details",null,(0,a.kt)("summary",null," Single Number "),(0,a.kt)("h3",{id:"-see-leetcode-problem-136"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/single-number/"},"\u2197 See LeetCode Problem #136")),(0,a.kt)(r.Z,{mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},'public class Solution {\n    static int singleNumber(int[] nums) {\n\n        int result = 0;\n\n        for (int i = 0; i < nums.length; i++) {\n            result ^= nums[i];\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n\n        int[] nums1 = {2,2,1};\n        //  O/P: 1\n\n        int[] nums2 = {4,1,2,1,2};\n        //  O/P: 4\n\n        int[] nums3 = {1};\n        //  O/P: 1\n\n        System.out.println("Example 1: " + singleNumber(nums1));\n        System.out.println("Example 2: " + singleNumber(nums2));\n        System.out.println("Example 3: " + singleNumber(nums3));\n    }\n}\n'))))))}c.isMDXComponent=!0}}]);