"use strict";(self.webpackChunkdsa=self.webpackChunkdsa||[]).push([[540],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>p});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=c(n),p=a,b=m["".concat(s,".").concat(p)]||m[p]||d[p]||i;return n?r.createElement(b,o(o({ref:t},u),{},{components:n})):r.createElement(b,o({ref:t},u))}));function p(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>o});var r=n(7294),a=n(6010);const i="tabItem_Ymn6";function o(e){let{children:t,hidden:n,className:o}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(i,o),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>p});var r=n(7462),a=n(7294),i=n(6010),o=n(2389),l=n(7392),s=n(7094),c=n(2466);const u="tabList__CuJ",d="tabItem_LNqP";function m(e){var t;const{lazy:n,block:o,defaultValue:m,values:p,groupId:b,className:g}=e,h=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=p??h.map((e=>{let{props:{value:t,label:n,attributes:r}}=e;return{value:t,label:n,attributes:r}})),k=(0,l.l)(f,((e,t)=>e.value===t.value));if(k.length>0)throw new Error(`Docusaurus error: Duplicate values "${k.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const v=null===m?m:m??(null==(t=h.find((e=>e.props.default)))?void 0:t.props.value)??h[0].props.value;if(null!==v&&!f.some((e=>e.value===v)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${v}" but none of its children has the corresponding value. Available values are: ${f.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:y,setTabGroupChoices:S}=(0,s.U)(),[O,w]=(0,a.useState)(v),x=[],{blockElementScrollPositionUntilNextRender:E}=(0,c.o5)();if(null!=b){const e=y[b];null!=e&&e!==O&&f.some((t=>t.value===e))&&w(e)}const C=e=>{const t=e.currentTarget,n=x.indexOf(t),r=f[n].value;r!==O&&(E(t),w(r),null!=b&&S(b,String(r)))},N=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{const t=x.indexOf(e.currentTarget)+1;n=x[t]??x[0];break}case"ArrowLeft":{const t=x.indexOf(e.currentTarget)-1;n=x[t]??x[x.length-1];break}}null==(t=n)||t.focus()};return a.createElement("div",{className:(0,i.Z)("tabs-container",u)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":o},g)},f.map((e=>{let{value:t,label:n,attributes:o}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:O===t?0:-1,"aria-selected":O===t,key:t,ref:e=>x.push(e),onKeyDown:N,onFocus:C,onClick:C},o,{className:(0,i.Z)("tabs__item",d,null==o?void 0:o.className,{"tabs__item--active":O===t})}),n??t)}))),n?(0,a.cloneElement)(h.filter((e=>e.props.value===O))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},h.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==O})))))}function p(e){const t=(0,o.Z)();return a.createElement(m,(0,r.Z)({key:String(t)},e))}},2816:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>p,frontMatter:()=>l,metadata:()=>c,toc:()=>d});var r=n(7462),a=(n(7294),n(3905)),i=n(5488),o=n(5162);const l={sidebar_position:4,id:"d-backtracking",title:"Backtracking",tags:["backtracking","letter-combinations-of-a-phone-number"]},s="Backtracking",c={unversionedId:"algorithms/d-backtracking",id:"algorithms/d-backtracking",title:"Backtracking",description:"- Understanding backtracking",source:"@site/docs/algorithms/d-backtracking.mdx",sourceDirName:"algorithms",slug:"/algorithms/d-backtracking",permalink:"/dsa/docs/algorithms/d-backtracking",draft:!1,tags:[{label:"backtracking",permalink:"/dsa/docs/tags/backtracking"},{label:"letter-combinations-of-a-phone-number",permalink:"/dsa/docs/tags/letter-combinations-of-a-phone-number"}],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,id:"d-backtracking",title:"Backtracking",tags:["backtracking","letter-combinations-of-a-phone-number"]},sidebar:"docs",previous:{title:"Recursion",permalink:"/dsa/docs/algorithms/c-recursion"},next:{title:"Greedy",permalink:"/dsa/docs/algorithms/e-greedy"}},u={},d=[{value:"Problems related to backtracking",id:"problems-related-to-backtracking",level:2},{value:"\u2197 Combination Sum",id:"-combination-sum",level:3},{value:"\u2197 See LeetCode Problem #17",id:"-see-leetcode-problem-17",level:3}],m={toc:d};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"backtracking"},"Backtracking"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Understanding backtracking"),(0,a.kt)("li",{parentName:"ul"},"Solved problems are presented in alphabetical order")),(0,a.kt)("h2",{id:"problems-related-to-backtracking"},"Problems related to backtracking"),(0,a.kt)("details",null,(0,a.kt)("summary",null," Combination Sum "),(0,a.kt)("h3",{id:"-combination-sum"},(0,a.kt)("a",{parentName:"h3",href:"/dsa/docs/data-structures/a-arrays"},"\u2197 Combination Sum"))),(0,a.kt)("details",null,(0,a.kt)("summary",null," Letter Combinations of a Phone Number "),(0,a.kt)("h3",{id:"-see-leetcode-problem-17"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/letter-combinations-of-a-phone-number/"},"\u2197 See LeetCode Problem #17")),(0,a.kt)(i.Z,{mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},'import java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\n\npublic class Solution {\n    //  Decrlare a list of strings\n    //      to return all the letter combinations\n    //  Each element in the ArrayList =\n    //      a possible letter combination\n    private static List<String> resultList = new ArrayList<>();\n\n    //  Declare a hashmap\n    //      to store the letter combinations (strings, as values)\n    //      for correspoding digits (characters, as keys)\n    private static Map<Character, String> letterMap = Map.of(\n            \'2\', "abc",\n            \'3\', "def",\n            \'4\', "ghi",\n            \'5\', "jkl",\n            \'6\', "mno",\n            \'7\', "pqrs",\n            \'8\', "tuv",\n            \'9\', "wxyz"\n    );\n\n    //  Declare a string (to store a given digit)\n    //     that can be accessed from a helper function\n    private static String digitsString;\n\n    //  Create a helper function to make recursive calls and backtrack\n    private static void backtrackHelper(int index, StringBuilder combination) {\n\n        //  Backtrack to the loop immediately following the recursive method call\n        //      if a proper combination is found\n        //      (after adding the combination to the output list)\n        if (combination.length() == digitsString.length()) {\n            resultList.add(combination.toString());\n            return;\n        }\n\n        //  Declare and store letters from the letterMap\n        //      for a given key obtained from\n        //      getting the digit at a given index\n        String letters = letterMap.get(digitsString.charAt(index));\n\n        //  for-each loop to iterate through all the letters in\n        //      the string "letters"\n        for (char c : letters.toCharArray()) {\n            combination.append(c);\n\n            //  Make a recursive call\n            backtrackHelper(++index, combination);\n\n            //  Return back from inside the if loop with the condition:\n            //      (combination.length() == digitsString.length())\n            //  Backtrack by deleting the last character/letter\n            //      in the current combination\n            combination.deleteCharAt(combination.length() - 1);\n\n            //  Also, update the index to for backtracking\n            //      by subtracting 1 from the current index\n            index--;\n        }\n\n    }\n\n    public static List<String> letterCombinations(String digits) {\n        if (digits.length() == 0) {\n            return resultList;\n        }\n\n        digitsString = digits;\n        backtrackHelper(0, new StringBuilder());\n\n        return resultList;\n    }\n\n    public static void main(String[] args) {\n        // Example 1:\n        String digits1 = "23";\n        //  O/P: ["ad","ae","af","bd","be","bf","cd","ce","cf"]\n\n        // Example 2:\n        String digits2 = "";\n        //  O/P: []\n\n        // Example 3:\n        String digits3 = "2";\n        //  O/P: ["a","b","c"]\n\n        // Example 4:\n        String digits4 = "2345";\n        //  INCORRECT - O/P: ["ad","ae","af","bd","be","bf","cd","ce","cf"]\n\n//        System.out.println(letterCombinations(digits1));\n//        System.out.println(letterCombinations(digits2));\n//        System.out.println(letterCombinations(digits3));\n        System.out.println(letterCombinations(digits4));\n\n    }\n}\n'))))))}p.isMDXComponent=!0}}]);