"use strict";(self.webpackChunkdsa=self.webpackChunkdsa||[]).push([[786],{3905:(e,n,r)=>{r.d(n,{Zo:()=>u,kt:()=>m});var t=r(7294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function l(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?l(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},l=Object.keys(e);for(t=0;t<l.length;t++)r=l[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)r=l[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=t.createContext({}),d=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},u=function(e){var n=d(e.components);return t.createElement(s.Provider,{value:n},e.children)},h={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},c=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=d(r),m=a,p=c["".concat(s,".").concat(m)]||c[m]||h[m]||l;return r?t.createElement(p,o(o({ref:n},u),{},{components:r})):t.createElement(p,o({ref:n},u))}));function m(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=r.length,o=new Array(l);o[0]=c;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var d=2;d<l;d++)o[d]=r[d];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}c.displayName="MDXCreateElement"},5162:(e,n,r)=>{r.d(n,{Z:()=>o});var t=r(7294),a=r(6010);const l="tabItem_Ymn6";function o(e){let{children:n,hidden:r,className:o}=e;return t.createElement("div",{role:"tabpanel",className:(0,a.Z)(l,o),hidden:r},n)}},5488:(e,n,r)=>{r.d(n,{Z:()=>m});var t=r(7462),a=r(7294),l=r(6010),o=r(2389),i=r(7392),s=r(7094),d=r(2466);const u="tabList__CuJ",h="tabItem_LNqP";function c(e){var n;const{lazy:r,block:o,defaultValue:c,values:m,groupId:p,className:v}=e,b=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=m??b.map((e=>{let{props:{value:n,label:r,attributes:t}}=e;return{value:n,label:r,attributes:t}})),T=(0,i.l)(f,((e,n)=>e.value===n.value));if(T.length>0)throw new Error(`Docusaurus error: Duplicate values "${T.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const g=null===c?c:c??(null==(n=b.find((e=>e.props.default)))?void 0:n.props.value)??b[0].props.value;if(null!==g&&!f.some((e=>e.value===g)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${g}" but none of its children has the corresponding value. Available values are: ${f.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:N,setTabGroupChoices:y}=(0,s.U)(),[k,S]=(0,a.useState)(g),w=[],{blockElementScrollPositionUntilNextRender:x}=(0,d.o5)();if(null!=p){const e=N[p];null!=e&&e!==k&&f.some((n=>n.value===e))&&S(e)}const L=e=>{const n=e.currentTarget,r=w.indexOf(n),t=f[r].value;t!==k&&(x(n),S(t),null!=p&&y(p,String(t)))},P=e=>{var n;let r=null;switch(e.key){case"ArrowRight":{const n=w.indexOf(e.currentTarget)+1;r=w[n]??w[0];break}case"ArrowLeft":{const n=w.indexOf(e.currentTarget)-1;r=w[n]??w[w.length-1];break}}null==(n=r)||n.focus()};return a.createElement("div",{className:(0,l.Z)("tabs-container",u)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":o},v)},f.map((e=>{let{value:n,label:r,attributes:o}=e;return a.createElement("li",(0,t.Z)({role:"tab",tabIndex:k===n?0:-1,"aria-selected":k===n,key:n,ref:e=>w.push(e),onKeyDown:P,onFocus:L,onClick:L},o,{className:(0,l.Z)("tabs__item",h,null==o?void 0:o.className,{"tabs__item--active":k===n})}),r??n)}))),r?(0,a.cloneElement)(b.filter((e=>e.props.value===k))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},b.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==k})))))}function m(e){const n=(0,o.Z)();return a.createElement(c,(0,t.Z)({key:String(n)},e))}},3757:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>u,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>d,toc:()=>h});var t=r(7462),a=(r(7294),r(3905)),l=r(5488),o=r(5162);const i={sidebar_position:9,id:"j-binary-trees",title:"Binary Trees",tags:["binary-trees","balanced-binary-tree","binary-tree-level-order-traversal","construct-binary-tree-from-preorder-and-inorder-traversal","diameter-of-binary-tree","invert-binary-tree","maximum-depth-of-binary-tree","same-tree","serialize-and-deserialize-binary-tree","subtree-of-another-tree","symmetric-tree"]},s="Binary Trees",d={unversionedId:"data-structures/j-binary-trees",id:"data-structures/j-binary-trees",title:"Binary Trees",description:"- Understanding binary trees",source:"@site/docs/data-structures/j-binary-trees.md",sourceDirName:"data-structures",slug:"/data-structures/j-binary-trees",permalink:"/dsa/docs/data-structures/j-binary-trees",draft:!1,tags:[{label:"binary-trees",permalink:"/dsa/docs/tags/binary-trees"},{label:"balanced-binary-tree",permalink:"/dsa/docs/tags/balanced-binary-tree"},{label:"binary-tree-level-order-traversal",permalink:"/dsa/docs/tags/binary-tree-level-order-traversal"},{label:"construct-binary-tree-from-preorder-and-inorder-traversal",permalink:"/dsa/docs/tags/construct-binary-tree-from-preorder-and-inorder-traversal"},{label:"diameter-of-binary-tree",permalink:"/dsa/docs/tags/diameter-of-binary-tree"},{label:"invert-binary-tree",permalink:"/dsa/docs/tags/invert-binary-tree"},{label:"maximum-depth-of-binary-tree",permalink:"/dsa/docs/tags/maximum-depth-of-binary-tree"},{label:"same-tree",permalink:"/dsa/docs/tags/same-tree"},{label:"serialize-and-deserialize-binary-tree",permalink:"/dsa/docs/tags/serialize-and-deserialize-binary-tree"},{label:"subtree-of-another-tree",permalink:"/dsa/docs/tags/subtree-of-another-tree"},{label:"symmetric-tree",permalink:"/dsa/docs/tags/symmetric-tree"}],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9,id:"j-binary-trees",title:"Binary Trees",tags:["binary-trees","balanced-binary-tree","binary-tree-level-order-traversal","construct-binary-tree-from-preorder-and-inorder-traversal","diameter-of-binary-tree","invert-binary-tree","maximum-depth-of-binary-tree","same-tree","serialize-and-deserialize-binary-tree","subtree-of-another-tree","symmetric-tree"]},sidebar:"docs",previous:{title:"Binary Search Trees",permalink:"/dsa/docs/data-structures/i-binary-search-trees"},next:{title:"Graphs",permalink:"/dsa/docs/data-structures/k-graphs"}},u={},h=[{value:"Problems related to binary trees",id:"problems-related-to-binary-trees",level:2},{value:"\u2197 See LeetCode Problem #110",id:"-see-leetcode-problem-110",level:3},{value:"\u2197 See LeetCode Problem #102",id:"-see-leetcode-problem-102",level:3},{value:"\u2197 See LeetCode Problem #105",id:"-see-leetcode-problem-105",level:3},{value:"\u2197 See LeetCode Problem #543",id:"-see-leetcode-problem-543",level:3},{value:"\u2197 See LeetCode Problem #226",id:"-see-leetcode-problem-226",level:3},{value:"\u2197 See LeetCode Problem #104",id:"-see-leetcode-problem-104",level:3},{value:"\u2197 See LeetCode Problem #100",id:"-see-leetcode-problem-100",level:3},{value:"\u2197 See LeetCode Problem #297",id:"-see-leetcode-problem-297",level:3},{value:"\u2197 See LeetCode Problem #572",id:"-see-leetcode-problem-572",level:3},{value:"\u2197 See LeetCode Problem #101",id:"-see-leetcode-problem-101",level:3}],c={toc:h};function m(e){let{components:n,...r}=e;return(0,a.kt)("wrapper",(0,t.Z)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"binary-trees"},"Binary Trees"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Understanding binary trees "),(0,a.kt)("li",{parentName:"ul"},"Solved problems are presented in alphabetical order")),(0,a.kt)("h2",{id:"problems-related-to-binary-trees"},"Problems related to binary trees"),(0,a.kt)("details",null,(0,a.kt)("summary",null," Balanced Binary Tree "),(0,a.kt)("h3",{id:"-see-leetcode-problem-110"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/balanced-binary-tree/"},"\u2197 See LeetCode Problem #110")),(0,a.kt)(l.Z,{mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"//  Needs to implement TreeNode\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n    TreeNode() {}\n    TreeNode(int val) { this.val = val; }\n    TreeNode(int val, TreeNode left, TreeNode right) {\n        this.val = val;\n        this.left = left;\n        this.right = right;\n    }\n}\n\n//  Utility class to store information from recursive calls\nfinal class TreeInfo {\n    public final boolean balanced;\n    public final int height;\n\n    public TreeInfo (boolean balanced, int height){\n        this.balanced = balanced;\n        this.height = height;\n    }\n}\n\npublic class Solution {\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\n\n    //  Return whether or not the tree at root is balanced while...\n    //      also storing the tree's height in a reference varialbe\n    private TreeInfo isBalancedTreeHelper(TreeNode root) {\n        //  An empty tree is balanced and has height = -1\n        if (root == null) {\n            return new TreeInfo(true, -1);\n        }\n\n        //  Check subtree to see if they are balanced\n        TreeInfo left = isBalancedTreeHelper(root.left);\n        if (!left.balanced) {\n            return new TreeInfo(false, -1);\n        }\n\n        //  Use the height obtained from the recursive calls to...\n        //      determine if the current node is also balanced\n        TreeInfo right = isBalancedTreeHelper(root.right);\n        if (!right.balanced) {\n            return new TreeInfo(false, -1);\n        }\n\n        if (java.lang.Math.abs(left.height - right.height) < 2) {\n            return new TreeInfo(\n                    true, java.lang.Math.max(left.height, right.height) + 1);\n        }\n\n        return new TreeInfo(false, -1);\n    }\n\n    public boolean isBalanced(TreeNode root) {\n\n        return isBalancedTreeHelper(root).balanced;\n\n    }\n\n    public static void main(String[] args) {\n\n    }\n}\n"))))),(0,a.kt)("details",null,(0,a.kt)("summary",null," Binary Tree Level Order Traversal "),(0,a.kt)("h3",{id:"-see-leetcode-problem-102"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/binary-tree-level-order-traversal/"},"\u2197 See LeetCode Problem #102")),(0,a.kt)(l.Z,{mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"import com.sun.source.tree.Tree;\n\nimport java.util.Deque;\nimport java.util.ArrayDeque;\nimport java.util.List;\nimport java.util.ArrayList;\n\nclass TreeNode {\n\n   int val;\n   TreeNode left;\n   TreeNode right;\n\n    //   Empty constructor to allow empty TreeNode\n    TreeNode () {\n    }\n\n   TreeNode (int val) {\n      this.val = val;\n   }\n\n//   TreeNode (int val, TreeNode left, TreeNode right) {\n//      this.val = val;\n//      this.left = left;\n//      this.right = right;\n//   }\n}\n\npublic class Solution {\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\n    public static List<List<Integer>> levelOrder(TreeNode root) {\n\n        List<List<Integer>> outputList = new ArrayList<>();\n\n        if (root == null) {\n            return outputList;\n        }\n\n        Deque<TreeNode> levelQueue = new ArrayDeque<>();\n        levelQueue.offer(root);\n\n        while (!levelQueue.isEmpty()) {\n            int currentSize = levelQueue.size();\n\n            List<Integer> currentList = new ArrayList<>();\n\n            for (int i = 0; i < currentSize; i++) {\n                TreeNode currentNode = levelQueue.poll();\n                currentList.add(currentNode.val);\n\n                if (currentNode.left != null) {\n                    levelQueue.offer(currentNode.left);\n                }\n\n                if (currentNode.right != null) {\n                    levelQueue.offer(currentNode.right);\n                }\n            }\n            outputList.add(currentList);\n        }\n\n        return outputList;\n    }\n\n        public static void main (String[] ars) {\n\n        //  Example 1\n        TreeNode root1 = new TreeNode(3);\n        root1.left = new TreeNode(9);\n        root1.right = new TreeNode(20);\n        root1.right.left = new TreeNode(15);\n        root1.right.right = new TreeNode(7);\n        //  O/P: [[3],[9,20],[15,7]]\n\n        System.out.println(levelOrder(root1));\n        System.out.println();\n\n        //  Example 2\n        TreeNode root2 = new TreeNode(1);\n        //  O/P: [[1]]\n        System.out.println(levelOrder(root2));\n        System.out.println();\n\n        //  [PROBLEMATIC] Example 3\n        TreeNode root3 = new TreeNode();\n        //  O/P: []\n        System.out.println(levelOrder(root3));\n\n    }\n}\n"))))),(0,a.kt)("details",null,(0,a.kt)("summary",null," Construct Binary Tree from Preorder and Inorder Traversal "),(0,a.kt)("h3",{id:"-see-leetcode-problem-105"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/"},"\u2197 See LeetCode Problem #105")),(0,a.kt)(l.Z,{mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},'import java.util.Map;\nimport java.util.HashMap;\n\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n    TreeNode() {}\n    TreeNode(int val) { this.val = val; }\n    TreeNode(int val, TreeNode left, TreeNode right) {\n        this.val = val;\n        this.left = left;\n        this.right = right;\n    }\n}\n\npublic class Solution {\n    /**\n     * Definition for a binary tree node.\n     * public class TreeNode {\n     *     int val;\n     *     TreeNode left;\n     *     TreeNode right;\n     *     TreeNode() {}\n     *     TreeNode(int val) { this.val = val; }\n     *     TreeNode(int val, TreeNode left, TreeNode right) {\n     *         this.val = val;\n     *         this.left = left;\n     *         this.right = right;\n     *     }\n     * }\n     */\n\n    //  Recursive Approch\n    //  Time Complexity: O(N)\n    //  Space Complexity: O(N)\n\n    //  Breaking down the probblem:\n    //      we have int[] preorder and int[] inorder\n    //      for the SAME binary tree\n    //      we need the return the binary tree\n\n    //  Preorder traversal means, traversing\n    //      root node -> left node -> right node\n    //  Inorder traversal means, traversing\n    //      left node-> root node -> right node\n\n    //  So, the very first element of int[] preorder\n    //      is the root of the binary tree\n\n    //  Since, int[] preorder and int[] inorder consist\n    //      of UNIQUE values (see constraints), we can use\n    //      a hashmap (hash table) to store the node values\n    //      and corresponding indices from int[] inorder\n    //      to find index the root node in int[] inorder.\n\n    //   For inroder traversl:\n    //      left node-> root node -> right node,\n    //      so, we can use the root index in int[] inorder\n    //      to find the left and right subtrees\n    //      on its left and right sides\n\n    //  Finally, to build the binary tree we can use\n    //      recursion on left and right subtrees\n    //  NOTE:   We will keep using int[] preorder\n    //              to find the root nodes for subtress\n    //          And, we will use the hashmap from int[] inorder\n    //          to determine the right index of the left subtree\n    //          and the left index of the right subtree\n    //          using the index of the root node in each subtree\n\n    //  Declare a global variable to store\n    //      the root indices from int[] inorder\n    //  And, initialize it with 0\n    private int rootIndex;\n\n    //  Declare a Map data structure to build a hash table\n    //      to store the node values and corresponding indices\n    //      from int[] inorder\n    private Map<Integer, Integer> inorderTraversalMap;\n\n    public TreeNode buildTree(int[] preorder, int[] inorder) {\n        //  Initialize the rootIndex with 0\n        rootIndex = 0;\n\n        //  Build the hashmap as mentioned earlier\n        inorderTraversalMap = new HashMap<>();\n        for (int i = 0; i < inorder.length; i++) {\n            //  key = node value\n            //  value = index of node value\n            inorderTraversalMap.put(inorder[i], i);\n        }\n\n\n        return recursiveHelper(preorder, rootIndex, preorder.length - 1);\n    }\n\n    public TreeNode recursiveHelper(int[] traversalArray,\n                                    int leftIndex,\n                                    int rightIndex) {\n\n        //  Recursion base case: returns null if\n        //      the left index in greater than the right index\n        if (leftIndex > rightIndex) {\n            return null;\n        }\n\n        //  Store the first element of the given preorder traversal array\n        //       as the value of the root node\n        //  rootIndex++: means FIRST apply rootIndex in the current statement\n        //      and then increase its value by 1 (to be used for a later call)\n        int nodeValue = traversalArray[rootIndex++];\n        TreeNode root = new TreeNode(nodeValue);\n\n        //  Recursively build the left subtree\n        root.left = recursiveHelper(traversalArray,\n                leftIndex,\n                inorderTraversalMap.get(nodeValue) - 1);\n\n        //  Recursively build the right subtree\n        root.right = recursiveHelper(traversalArray,\n                inorderTraversalMap.get(nodeValue) + 1,\n                rightIndex);\n\n        return root;\n    }\n\n    public static void main(String[] args) {\n\n        Solution solution = new Solution();\n\n        // Example 1:\n        int[] preorder = {3,9,20,15,7};\n        int [] inorder = {9,3,15,20,7};\n        //  .val to print only the value of root node\n        System.out.println(solution.buildTree(preorder, inorder).val);\n\n        System.out.println("---");\n        // Example 2:\n        preorder = new int[] {-1};\n        inorder = new int[] {-1};\n        //  .val to print only the value of root node\n        System.out.println(solution.buildTree(preorder, inorder).val);\n    }\n}\n'))))),(0,a.kt)("details",null,(0,a.kt)("summary",null," Diameter of Binary Tree "),(0,a.kt)("h3",{id:"-see-leetcode-problem-543"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/diameter-of-binary-tree/"},"\u2197 See LeetCode Problem #543")),(0,a.kt)(l.Z,{mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"class TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n    TreeNode() {}\n    TreeNode(int val) { this.val = val; }\n    TreeNode(int val, TreeNode left, TreeNode right) {\n        this.val = val;\n        this.left = left;\n        this.right = right;\n    }\n}\n\n\npublic class Solution {\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\n//class Solution {\n\n    //  Global variable to store diameter\n    static int d;\n\n    //  Method to return the longest diameter\n    static int diameterOfBinaryTree(TreeNode root) {\n\n        d = 0;\n        longestPath(root);\n        return d;\n    }\n\n    //  Private method to implement the depth-first search\n    //      to find the longest diameter\n    static int longestPath(TreeNode root) {\n        if (root == null) {\n            return 0;\n        }\n\n        //  Recursively find the longest path in\n        //      both left child and right child\n        int leftPath = longestPath(root.left);\n        int rightPath = longestPath(root.right);\n\n        //  Update the diameter if leftPath + rightPath is\n        //      greater than current diameter\n        d = Math.max(d, leftPath + rightPath);\n\n        //  Return the longest path between leftPath and rightPath\n        //  Remember to add 1 for the path connecting the node and its parent\n        return Math.max(leftPath, rightPath) + 1;\n    }\n\n    public static void main(String[] args) {\n\n        // Example 1:\n        int[] dataArray1 = {1,2,3,4,5};\n        //  O/P: 3\n\n        // Example 2:\n        int[] dataArray2 = {1,2};\n        //  O/P: 1\n\n        TreeNode treeNode = new TreeNode();\n\n    }\n\n}\n"))))),(0,a.kt)("details",null,(0,a.kt)("summary",null," Invert Binary Tree "),(0,a.kt)("h3",{id:"-see-leetcode-problem-226"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/invert-binary-tree/"},"\u2197 See LeetCode Problem #226")),(0,a.kt)(l.Z,{mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0}," class TreeNode {\n     int val;\n     TreeNode left;\n     TreeNode right;\n     TreeNode() {}\n     TreeNode(int val) { this.val = val; }\n     TreeNode(int val, TreeNode left, TreeNode right) {\n         this.val = val;\n         this.left = left;\n         this.right = right;\n     }\n }\n\npublic class Solution {\n    /**\n     * Definition for a binary tree node.\n     * public class TreeNode {\n     *     int val;\n     *     TreeNode left;\n     *     TreeNode right;\n     *     TreeNode() {}\n     *     TreeNode(int val) { this.val = val; }\n     *     TreeNode(int val, TreeNode left, TreeNode right) {\n     *         this.val = val;\n     *         this.left = left;\n     *         this.right = right;\n     *     }\n     * }\n     */\n//    class Solution {\n        static TreeNode invertTree(TreeNode root) {\n\n            if (root == null) {\n                return null;\n            }\n\n            TreeNode right = invertTree(root.right);\n            TreeNode left = invertTree(root.left);\n\n            root.left = right;\n            root.right = left;\n\n            return root;\n\n        }\n\n    public static void main(String[] args) {\n\n    }\n}\n"))))),(0,a.kt)("details",null,(0,a.kt)("summary",null," Maximum Depth of Binary Tree "),(0,a.kt)("h3",{id:"-see-leetcode-problem-104"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/maximum-depth-of-binary-tree/"},"\u2197 See LeetCode Problem #104")),(0,a.kt)(l.Z,{mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"//  Needs to implement TreeNode\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n    TreeNode() {}\n    TreeNode(int val) { this.val = val; }\n    TreeNode(int val, TreeNode left, TreeNode right) {\n        this.val = val;\n        this.left = left;\n        this.right = right;\n    }\n}\n\npublic class Solution {\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\n//class Solution {\n    static int maxDepth(TreeNode root) {\n\n        if (root == null) {\n            return 0;\n        } else {\n            int leftHeight = maxDepth(root.left);\n            int rightHeight = maxDepth(root.right);\n\n            return java.lang.Math.max(leftHeight, rightHeight) + 1;\n        }\n    }\n\n    public static void main(String[] args) {\n\n    }\n}\n"))))),(0,a.kt)("details",null,(0,a.kt)("summary",null," Same Tree "),(0,a.kt)("h3",{id:"-see-leetcode-problem-100"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/same-tree/"},"\u2197 See LeetCode Problem #100")),(0,a.kt)(l.Z,{mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"//  Needs to implement tree\n\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n    TreeNode() {}\n    TreeNode(int val) { this.val = val; }\n    TreeNode(int val, TreeNode left, TreeNode right) {\n        this.val = val;\n        this.left = left;\n        this.right = right;\n    }\n}\n\nclass Solution {\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\n//class Solution {\n    static boolean isSameTree(TreeNode p, TreeNode q) {\n        if (p == null && q == null) {\n            return true;\n        } else if (p == null || q == null || p.val != q.val) {\n            return false;\n        }\n\n        return  isSameTree(p.left, q.left) && isSameTree(p.right, q.right);\n\n    }\n\n    public static void main(String[] args) {\n    }\n}\n"))))),(0,a.kt)("details",null,(0,a.kt)("summary",null," Serialize and Deserialize Binary Tree "),(0,a.kt)("h3",{id:"-see-leetcode-problem-297"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/serialize-and-deserialize-binary-tree/"},"\u2197 See LeetCode Problem #297")),(0,a.kt)(l.Z,{mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"//  Need to implement tree\n\nimport java.util.ArrayDeque;\n\n//  Needs to implement TreeNode\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n    TreeNode(int x) { val = x; }\n}\n\npublic class Solution {\n    /**\n     * Definition for a binary tree node.\n     * public class TreeNode {\n     * int val;\n     * TreeNode left;\n     * TreeNode right;\n     * TreeNode(int x) { val = x; }\n     * }\n     */\n    static class Codec {\n\n        //  Postorder DFS follows: left -> right -> root\n        public StringBuilder postorderDFS(TreeNode root,\n                                          StringBuilder sBuilder) {\n\n            if (root == null) {\n                return sBuilder;\n            }\n\n            postorderDFS(root.left, sBuilder);\n            postorderDFS(root.right, sBuilder);\n            sBuilder.append(root.val);\n            sBuilder.append(' ');\n\n            return sBuilder;\n        }\n\n        // Encoding a tree to a single string\n        public String serialize(TreeNode root) {\n\n            StringBuilder sBuilder = postorderDFS(root, new StringBuilder());\n\n            if (sBuilder.length() > 0) {\n                sBuilder.deleteCharAt(sBuilder.length() - 1);\n            }\n\n            return sBuilder.toString();\n        }\n\n        public TreeNode deserializeHelper(Integer low,\n                                          Integer high,\n                                          ArrayDeque<Integer> arrayDeque) {\n            if (arrayDeque.isEmpty()) {\n                return null;\n            }\n\n            int val = arrayDeque.getLast();\n\n            if (val < low || val > high) {\n                return null;\n            }\n\n            arrayDeque.removeLast();\n            TreeNode root = new TreeNode(val);\n            root.right = deserializeHelper(val, high, arrayDeque);\n            root.left = deserializeHelper(low, val, arrayDeque);\n            return root;\n        }\n\n        // Decoding the encoded data to tree.\n        public TreeNode deserialize(String data) {\n\n            if (data.isEmpty()) {\n                return null;\n            }\n\n            ArrayDeque<Integer> arrayDeque = new ArrayDeque<>();\n\n            for (String string : data.split(\"\\\\s+\")) {\n                arrayDeque.add(Integer.valueOf(string));\n            }\n\n            return deserializeHelper(Integer.MIN_VALUE,\n                    Integer.MAX_VALUE, arrayDeque);\n        }\n    }\n\n    public static void main(String[] args) {\n\n        // Example 1:\n        int[] root1 = {2, 1, 3};\n        //  O/P: [2,1,3]\n\n        // Example 2:\n        int[] root2 = {};\n        //  O/P: []\n\n    }\n}\n\n// Your Codec object will be instantiated and called as such:\n// Codec ser = new Codec();\n// Codec deser = new Codec();\n// String tree = ser.serialize(root);\n// TreeNode ans = deser.deserialize(tree);\n// return ans;\n"))))),(0,a.kt)("details",null,(0,a.kt)("summary",null," Subtree of Another Tree "),(0,a.kt)("h3",{id:"-see-leetcode-problem-572"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/subtree-of-another-tree/"},"\u2197 See LeetCode Problem #572")),(0,a.kt)(l.Z,{mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"//  Needs to implement TreeNode\n\nclass TreeNode {\n     int val;\n     TreeNode left;\n     TreeNode right;\n     TreeNode() {}\n     TreeNode(int val) { this.val = val; }\n     TreeNode(int val, TreeNode left, TreeNode right) {\n         this.val = val;\n         this.left = left;\n         this.right = right;\n     }\n }\n\npublic class Solution {\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\n//class Solution {\n    static boolean isSubtree(TreeNode root, TreeNode subRoot) {\n\n        if (subRoot == null) {\n            return true;\n        }\n\n        if (root == null) {\n            return false;\n        }\n\n        if (isSameTree(root, subRoot)){\n            return true;\n        }\n\n        return (isSubtree(root.left, subRoot) ||\n                isSubtree(root.right, subRoot));\n    }\n\n    private static boolean isSameTree(TreeNode root1, TreeNode root2) {\n        if (root1 == null && root2 == null) {\n            return true;\n        }\n\n        if (root1 == null || root2 == null || root1.val != root2.val) {\n            return false;\n        }\n\n        return (isSameTree(root1.left, root2.left) &&\n                isSameTree(root1.right, root2.right));\n\n    }\n\n    public static void main(String[] args) {\n\n    }\n}\n"))))),(0,a.kt)("details",null,(0,a.kt)("summary",null," Symmetric Tree "),(0,a.kt)("h3",{id:"-see-leetcode-problem-101"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/symmetric-tree/"},"\u2197 See LeetCode Problem #101")),(0,a.kt)(l.Z,{mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"//  TreeNode needs to be implemented\n\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n    TreeNode() {}\n    TreeNode(int val) { this.val = val; }\n    TreeNode(int val, TreeNode left, TreeNode right) {\n        this.val = val;\n        this.left = left;\n        this.right = right;\n    }\n}\n\npublic class Solution {\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\n//class Solution {\n    public boolean isSymmetric(TreeNode root) {\n        return isMirror(root, root);\n    }\n\n    public boolean isMirror(TreeNode root1, TreeNode root2) {\n        if (root1 == null && root2 == null) {\n            return true;\n        }\n        if (root1 == null || root2 == null) {\n            return false;\n        }\n\n        return (root1.val == root2.val)\n                && isMirror(root1.left, root2.right)\n                && isMirror(root1.right, root2.left);\n\n    }\n\n    public static void main(String[] args) {\n\n    }\n}\n"))))))}m.isMDXComponent=!0}}]);