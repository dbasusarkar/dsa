"use strict";(self.webpackChunkdsa=self.webpackChunkdsa||[]).push([[5989],{3905:(e,n,t)=>{t.d(n,{Zo:()=>v,kt:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=r.createContext({}),d=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},v=function(e){var n=d(e.components);return r.createElement(o.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,v=s(e,["components","mdxType","originalType","parentName"]),p=d(t),m=a,c=p["".concat(o,".").concat(m)]||p[m]||u[m]||l;return t?r.createElement(c,i(i({ref:n},v),{},{components:t})):r.createElement(c,i({ref:n},v))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,i=new Array(l);i[0]=p;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var d=2;d<l;d++)i[d]=t[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>i});var r=t(7294),a=t(6010);const l="tabItem_Ymn6";function i(e){let{children:n,hidden:t,className:i}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(l,i),hidden:t},n)}},5488:(e,n,t)=>{t.d(n,{Z:()=>m});var r=t(7462),a=t(7294),l=t(6010),i=t(2389),s=t(7392),o=t(7094),d=t(2466);const v="tabList__CuJ",u="tabItem_LNqP";function p(e){var n;const{lazy:t,block:i,defaultValue:p,values:m,groupId:c,className:b}=e,g=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=m??g.map((e=>{let{props:{value:n,label:t,attributes:r}}=e;return{value:n,label:t,attributes:r}})),h=(0,s.l)(f,((e,n)=>e.value===n.value));if(h.length>0)throw new Error(`Docusaurus error: Duplicate values "${h.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const y=null===p?p:p??(null==(n=g.find((e=>e.props.default)))?void 0:n.props.value)??g[0].props.value;if(null!==y&&!f.some((e=>e.value===y)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${y}" but none of its children has the corresponding value. Available values are: ${f.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:w,setTabGroupChoices:k}=(0,o.U)(),[I,x]=(0,a.useState)(y),L=[],{blockElementScrollPositionUntilNextRender:E}=(0,d.o5)();if(null!=c){const e=w[c];null!=e&&e!==I&&f.some((n=>n.value===e))&&x(e)}const S=e=>{const n=e.currentTarget,t=L.indexOf(n),r=f[t].value;r!==I&&(E(n),x(r),null!=c&&k(c,String(r)))},O=e=>{var n;let t=null;switch(e.key){case"ArrowRight":{const n=L.indexOf(e.currentTarget)+1;t=L[n]??L[0];break}case"ArrowLeft":{const n=L.indexOf(e.currentTarget)-1;t=L[n]??L[L.length-1];break}}null==(n=t)||n.focus()};return a.createElement("div",{className:(0,l.Z)("tabs-container",v)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":i},b)},f.map((e=>{let{value:n,label:t,attributes:i}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:I===n?0:-1,"aria-selected":I===n,key:n,ref:e=>L.push(e),onKeyDown:O,onFocus:S,onClick:S},i,{className:(0,l.Z)("tabs__item",u,null==i?void 0:i.className,{"tabs__item--active":I===n})}),t??n)}))),t?(0,a.cloneElement)(g.filter((e=>e.props.value===I))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},g.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==I})))))}function m(e){const n=(0,i.Z)();return a.createElement(p,(0,r.Z)({key:String(n)},e))}},3640:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>v,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>d,toc:()=>u});var r=t(7462),a=(t(7294),t(3905)),l=t(5488),i=t(5162);const s={sidebar_position:4,id:"d-intervals",title:"Intervals",tags:["intervals","insert-interval","merge-intervals"]},o="Intervals",d={unversionedId:"patterns/d-intervals",id:"patterns/d-intervals",title:"Intervals",description:"- Understanding intervals",source:"@site/docs/patterns/d-intervals.md",sourceDirName:"patterns",slug:"/patterns/d-intervals",permalink:"/dsa/docs/patterns/d-intervals",draft:!1,tags:[{label:"intervals",permalink:"/dsa/docs/tags/intervals"},{label:"insert-interval",permalink:"/dsa/docs/tags/insert-interval"},{label:"merge-intervals",permalink:"/dsa/docs/tags/merge-intervals"}],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,id:"d-intervals",title:"Intervals",tags:["intervals","insert-interval","merge-intervals"]},sidebar:"docs",previous:{title:"Fast and Slow Pointers",permalink:"/dsa/docs/patterns/c-fast-and-slow-pointers"},next:{title:"Linked List Reversal",permalink:"/dsa/docs/patterns/e-linked-list-reversal"}},v={},u=[{value:"Problems related to intervals",id:"problems-related-to-intervals",level:2},{value:"\u2197 See LeetCode Problem #57",id:"-see-leetcode-problem-57",level:3},{value:"\u2197 See LeetCode Problem #56",id:"-see-leetcode-problem-56",level:3}],p={toc:u};function m(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"intervals"},"Intervals"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Understanding intervals "),(0,a.kt)("li",{parentName:"ul"},"Solved problems are presented in alphabetical order")),(0,a.kt)("h2",{id:"problems-related-to-intervals"},"Problems related to intervals"),(0,a.kt)("details",null,(0,a.kt)("summary",null," Insert Interval (Expand/Collapse) "),(0,a.kt)("h3",{id:"-see-leetcode-problem-57"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/insert-interval/"},"\u2197 See LeetCode Problem #57")),(0,a.kt)(l.Z,{mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.LinkedList;\nimport java.util.List;\n\npublic class Solution {\n    public static int[][] insert(int[][] intervals, int[] newInterval) {\n\n        LinkedList<int[]> mergedIntervals = new LinkedList<>();\n\n        int[][] emptyIntervals = {{}};\n\n        //  Check if given intervals is null or empty\n        //  If true, return only list of intervals with newInterval\n        if (intervals == null || Arrays.deepEquals(intervals, emptyIntervals)) {\n            mergedIntervals.add(newInterval);\n            return mergedIntervals.toArray(new int[mergedIntervals.size()][2]);\n        }\n\n        int newIntervalStart = newInterval[0];\n        int newIntervalEnd = newInterval[1];\n\n        int index = 0;\n\n        //  Added all intervals with start of the intervals\n        //      less than the end of the new interval\n        while (index < intervals.length &&\n                intervals[index][1] < newIntervalStart) {\n            mergedIntervals.add(intervals[index++]);\n        }\n\n        int[] interval = new int[2];\n\n        while (index < intervals.length &&\n                intervals[index][0] <= newIntervalEnd) {\n            newIntervalStart = Math.min(intervals[index][0], newIntervalStart);\n            newIntervalEnd = Math.max(intervals[index][1], newIntervalEnd);\n            index++;\n        }\n\n        interval[0] = newIntervalStart;\n        interval[1] = newIntervalEnd;\n\n        mergedIntervals.add(interval);\n\n        //  Add all remaining intervals to the output list\n        while (index < intervals.length) {\n            mergedIntervals.add(intervals[index++]);\n        }\n\n        return mergedIntervals.toArray(new int[mergedIntervals.size()][2]);\n\n    }\n\n    public static void main (String[] args) {\n        // Example 1:\n        int[][] intervals1 = {{1,3},{6,9}};\n        int[] newInterval1 = {2,5};\n        //Output: [[1,5],[6,9]]\n\n        // Example 2:\n        int[][] intervals2 = {{1,2},{3,5},{6,7},{8,10},{12,16}};\n        int[] newInterval2 = {4,8};\n        //Output: [[1,2],[3,10],[12,16]]\n\n        // Example 3:\n        int[][] intervals3 = null;\n        int[] newInterval3 = {4,8};\n\n        // Example 4:\n        int[][] intervals4 = {{}};\n        int[] newInterval4 = {4,8};\n\n        System.out.println(Arrays.deepToString(insert(intervals1, newInterval1)));\n        System.out.println(Arrays.deepToString(insert(intervals2, newInterval2)));\n        System.out.println(Arrays.deepToString(insert(intervals3, newInterval3)));\n        System.out.println(Arrays.deepToString(insert(intervals4, newInterval4)));\n    }\n}\n"))))),(0,a.kt)("details",null,(0,a.kt)("summary",null," Merge Intervals (Expand/Collapse) "),(0,a.kt)("h3",{id:"-see-leetcode-problem-56"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/merge-intervals/"},"\u2197 See LeetCode Problem #56")),(0,a.kt)(l.Z,{mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"import java.util.Arrays;\nimport java.util.LinkedList;\n\npublic class Solution {\n    static int[][] merge(int[][] intervals) {\n\n        //  Sort the given array based on the\n        //      starting value of each interval\n        Arrays.sort(intervals, (a,b) -> Integer.compare(a[0], b[0]));\n\n        //  Create a new LinkedList to generate the output\n        LinkedList<int[]> mergedList = new LinkedList<>();\n\n        for (int[] interval : intervals) {\n            if (mergedList.isEmpty() ||\n                    //  Or, if the ending value of last interval is less\n                    //      than the starting value of the current interval\n                    mergedList.getLast()[1] < interval [0]) {\n                mergedList.add(interval);\n            } else {\n                //  Update the ending value of the last interval\n                mergedList.getLast()[1] =\n                        //  The maximum of:\n                        //      the ending value of the last interval and\n                        //      the ending value of the current interval\n                        Math.max(mergedList.getLast()[1], interval[1]);\n            }\n        }\n\n        return mergedList.toArray(new int[mergedList.size()][]);\n    }\n\n    public static void main(String[] args) {\n\n        // Example 1:\n        int[][] intervals1 = {{1,3},{2,6},{8,10},{15,18}};\n        //  O/P: [[1,6],[8,10],[15,18]]\n\n        // Example 2:\n        int[][] intervals2 = {{1,4},{4,5}};\n        //  O/P: [[1,5]]\n\n        System.out.println(Arrays.deepToString(merge(intervals1)));\n        System.out.println(Arrays.deepToString(merge(intervals2)));\n    }\n}\n"))))))}m.isMDXComponent=!0}}]);